/*
 * DcuVFrkMain.java
 *
 * Created on January 16, 2014, 10:39 AM
 */

package jDcuVFrkPackage;

import javax.swing.JFrame;
//import java.awt.Dimension;
//import java.lang.String;

//import java.util.Formatter;
//import java.nio.ByteBuffer;

//import gnu.io.CommPortIdentifier;
//import gnu.io.SerialPort;
//import gnu.io.NoSuchPortException;
//import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;


//import java.io.InputStream;
//import java.io.OutputStream;
import java.io.IOException;
//import java.nio.charset.Charset;
import java.util.Arrays;

//import java.awt.Component;
import java.awt.Cursor;
//import javax.swing.JButton;

import javax.swing.text.DefaultCaret;
import javax.swing.JOptionPane;

import javax.swing.JFileChooser;
//import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.BufferedReader;

//import java.util.ArrayList;
//import java.util.List;

import java.util.concurrent.TimeUnit;
import java.util.Timer;


/**
 *
 * @author  FKY301079
 */
public class DcuVFrkMain extends javax.swing.JFrame {
    
    /** Creates new form DcuVFrkMain */
    public DcuVFrkMain() {
        initComponents();
        
        try{
            initialize();
        }
        catch(Exception ex){
            System.err.println(ex.getMessage());
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mntmExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mntmGseConfigure = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mntmGseBaudRate = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mntmUploadDataTable = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        mntmShowCommData = new javax.swing.JMenuItem();
        mntmDetectSerialPort = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        mntmContWriting = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mntmCalcCrc = new javax.swing.JMenuItem();
        mntmConfigureDcuID = new javax.swing.JMenuItem();
        mntmSwUpgrade = new javax.swing.JMenuItem();
        mntmGetTempRecord = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        mntmChkBootVersion = new javax.swing.JMenuItem();
        mntmActivateBoot = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        mntmInitMaint = new javax.swing.JMenuItem();
        mntmConfigureDcu = new javax.swing.JMenuItem();
        mntmRequestVer = new javax.swing.JMenuItem();
        mntmDisplayConfig = new javax.swing.JMenuItem();
        mntmReboot = new javax.swing.JMenuItem();
        mntmEraseData = new javax.swing.JMenuItem();
        mntmInvalidateData = new javax.swing.JMenuItem();
        mntmTestBlockRead = new javax.swing.JMenuItem();
        mntmRoBlockRead = new javax.swing.JMenuItem();
        mntmDataDownload = new javax.swing.JMenuItem();
        mntmReturnDcuStatus = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        mntmReadData = new javax.swing.JMenuItem();
        mntmWriteData = new javax.swing.JMenuItem();
        mntmReadDcuID = new javax.swing.JMenuItem();
        mntmReadConfig = new javax.swing.JMenuItem();
        mntmChangeBaudRate = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jShowCommDataWindow1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DCU V");
        setResizable(false);

        jButton1.setText("Safran Electronics Canada");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField1.setBackground(javax.swing.UIManager.getDefaults().getColor("CheckBox.background"));
        jTextField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField1.setFocusable(false);
        jTextField1.setPreferredSize(new java.awt.Dimension(120, 20));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Cantarell", 0, 12)); // NOI18N
        jLabel1.setText(" Developed by Safran Electronics Canada.  (www.safran-electronics.ca)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");

        mntmExit.setText("Exit Program");
        mntmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmExitActionPerformed(evt);
            }
        });
        jMenu1.add(mntmExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        mntmGseConfigure.setText("Item");
        jMenu2.add(mntmGseConfigure);
        jMenu2.add(jSeparator1);

        mntmGseBaudRate.setText("Item");
        jMenu2.add(mntmGseBaudRate);
        jMenu2.add(jSeparator2);

        mntmUploadDataTable.setText("Item");
        mntmUploadDataTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmUploadDataTableActionPerformed(evt);
            }
        });
        jMenu2.add(mntmUploadDataTable);
        jMenu2.add(jSeparator3);

        mntmShowCommData.setText("Item");
        jMenu2.add(mntmShowCommData);

        mntmDetectSerialPort.setText("Item");
        jMenu2.add(mntmDetectSerialPort);
        jMenu2.add(jSeparator4);

        mntmContWriting.setText("Item");
        jMenu2.add(mntmContWriting);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Production");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        mntmCalcCrc.setText("Calculate CRC");
        mntmCalcCrc.setToolTipText("");
        jMenu3.add(mntmCalcCrc);

        mntmConfigureDcuID.setText("Configure DCU ID");
        mntmConfigureDcuID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmConfigureDcuIDActionPerformed(evt);
            }
        });
        jMenu3.add(mntmConfigureDcuID);

        mntmSwUpgrade.setText("Software Upgrade");
        jMenu3.add(mntmSwUpgrade);

        mntmGetTempRecord.setText("Get Temperature Record");
        jMenu3.add(mntmGetTempRecord);
        jMenu3.add(jSeparator5);

        mntmChkBootVersion.setText("Check Bootloader Version");
        jMenu3.add(mntmChkBootVersion);

        mntmActivateBoot.setText("Activate Bootloader");
        jMenu3.add(mntmActivateBoot);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Maintenance");

        mntmInitMaint.setText("Initialize Maintenance");
        mntmInitMaint.setActionCommand("Initialize Command");
        mntmInitMaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmInitMaintActionPerformed(evt);
            }
        });
        jMenu4.add(mntmInitMaint);

        mntmConfigureDcu.setText("Configure DCU");
        mntmConfigureDcu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmConfigureDcuActionPerformed(evt);
            }
        });
        jMenu4.add(mntmConfigureDcu);

        mntmRequestVer.setText("Request Version");
        jMenu4.add(mntmRequestVer);

        mntmDisplayConfig.setText("Display Configuration");
        mntmDisplayConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmDisplayConfigActionPerformed(evt);
            }
        });
        jMenu4.add(mntmDisplayConfig);

        mntmReboot.setText("Reboot");
        mntmReboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmRebootActionPerformed(evt);
            }
        });
        jMenu4.add(mntmReboot);

        mntmEraseData.setText("Erase Data");
        mntmEraseData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmEraseDataActionPerformed(evt);
            }
        });
        jMenu4.add(mntmEraseData);

        mntmInvalidateData.setText("Invalidate Data");
        jMenu4.add(mntmInvalidateData);

        mntmTestBlockRead.setText("Test Block Read");
        jMenu4.add(mntmTestBlockRead);

        mntmRoBlockRead.setText("RO Block Read");
        jMenu4.add(mntmRoBlockRead);

        mntmDataDownload.setText("Data Download");
        jMenu4.add(mntmDataDownload);

        mntmReturnDcuStatus.setText("Return DCU Status");
        jMenu4.add(mntmReturnDcuStatus);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Command");

        mntmReadData.setText("Item");
        jMenu5.add(mntmReadData);

        mntmWriteData.setText("Item");
        jMenu5.add(mntmWriteData);

        mntmReadDcuID.setText("Item");
        mntmReadDcuID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmReadDcuIDActionPerformed(evt);
            }
        });
        jMenu5.add(mntmReadDcuID);

        mntmReadConfig.setText("Item");
        mntmReadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmReadConfigActionPerformed(evt);
            }
        });
        jMenu5.add(mntmReadConfig);

        mntmChangeBaudRate.setText("Item");
        jMenu5.add(mntmChangeBaudRate);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Window");

        jShowCommDataWindow1.setText("Show Comm Data Window");
        jShowCommDataWindow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowCommDataWindow1ActionPerformed(evt);
            }
        });
        jMenu6.add(jShowCommDataWindow1);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jShowCommDataWindow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowCommDataWindow1ActionPerformed
        GlobalVars.commDataFrame.setVisible(true);
    }//GEN-LAST:event_jShowCommDataWindow1ActionPerformed

    private void mntmEraseDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmEraseDataActionPerformed
        TcmdData cmdData = new TcmdData();
        GlobalVars.maintCommand.eraseData(cmdData);
    }//GEN-LAST:event_mntmEraseDataActionPerformed

    private void mntmDisplayConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmDisplayConfigActionPerformed
        TcmdData cmdData = new TcmdData();
        GlobalVars.maintCommand.displayConfigure(cmdData);
    }//GEN-LAST:event_mntmDisplayConfigActionPerformed

    private void mntmRebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmRebootActionPerformed
        TcmdData cmdData = new TcmdData();
        int returnVal1 = JOptionPane.CANCEL_OPTION;
                        
        //---------------------------
        // Send Reboot Command
        //---------------------------
        returnVal1 = GlobalVars.maintCommand.reboot(cmdData);
        
        //---------------------------
        // Send Maintenance Command
        //---------------------------
        cmdData.clear();
        returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

        // If it fails, try to connect at 19,200 baud
        if (returnVal1 != 0)
        {
            Utilities.setConnectionBaudrate(19200);

            //---------------------------
            // Send Maintenance Command
            //---------------------------
            cmdData.clear();
            returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

            // If it fails, try to connect at 57,600 baud
            if (returnVal1 != 0)
            {
                Utilities.setConnectionBaudrate(57600);

                //---------------------------
                // Send Maintenance Command
                //---------------------------
                cmdData.clear();
                returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

                // If it fails, try to connect at 115,200 baud
                if (returnVal1 != 0)
                {
                    Utilities.setConnectionBaudrate(115200);

                    //---------------------------
                    // Send Maintenance Command
                    //---------------------------
                    cmdData.clear();
                    returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

                    // if all fails, set sysConfig's Baud Rate back to 9600
                    if (returnVal1 != 0)
                    {
                        Utilities.setConnectionBaudrate(9600);

                        //---------------------------
                        // Send Maintenance Command
                        //---------------------------
                        cmdData.clear();
                        returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);
                    }                
                }
            }            
        }
        
        // Need some delay after entering Maintenance mode. Need to wait for DCU device to settle down
        // Sleep for 0.2 second.
        try{
            TimeUnit.MILLISECONDS.sleep(200);  // delay
        }
        catch(InterruptedException ex){}   
        
                
        //---------------------------------------------
        // Send Display Configuration Command
        //---------------------------------------------
        cmdData.clear();
        GlobalVars.maintCommand.displayConfigure(cmdData);

        // Display configuration
        byte[] tmpReceivedBuffer = new byte[Constants.BUF_SIZE];
        int offset = 0;
        String dcuAddressStr = new String();
        String baudRateStr = new String();
        String dcuTypeStr = new String();
        String blockSizeStr = new String();
        String testEnableStr = new String();
        String transmitModeStr = new String();
        String spareStr = new String();
        String tempStringStatus = new String();
        
        // Get a copy of the received buffer
        tmpReceivedBuffer = java.util.Arrays.copyOf(cmdData.receiveBuf, Constants.BUF_SIZE);


        // DCU Address
        offset = 3;
        GlobalVars.sysConfig.setDcuAddress((int) tmpReceivedBuffer[offset]);
        dcuAddressStr = Integer.toString(GlobalVars.sysConfig.getDcuAddress());

        // baud rate
        offset = 4;
        GlobalVars.sysConfig.setBaudRate((int) tmpReceivedBuffer[offset]);
        switch(tmpReceivedBuffer[offset])
        {
            case 1:
                baudRateStr = "9600";
                break;
            case 2:
                baudRateStr = "19200";
                break;
            case 3:
                baudRateStr = "38400";
                break;
            case 4:
                baudRateStr = "115200";
                break;
            default:
                baudRateStr = "Unknown";
                break;
        }

        // Transmit Mode
        offset = 5;
        GlobalVars.sysConfig.setTransmitMode((int) tmpReceivedBuffer[offset]);
        switch(tmpReceivedBuffer[offset])
        {
            case 0:
                transmitModeStr = "Continuous";
                break;
            case ((byte) 0xFF):
                transmitModeStr = "Switched";
                break;
            default:
                transmitModeStr = "Unknown";
                break;
        }


        // DCU Type
        offset = 6;
        switch(tmpReceivedBuffer[offset])
        {
            case ((byte) 0x55):
                //GlobalVars.sysConfig.cmdSet = Constants.DCUV;
                GlobalVars.sysConfig.setCmdSet((int) Constants.DCUV);
                dcuTypeStr = "DCU V";
                break;
            case ((byte) 0xAA):
                //GlobalVars.sysConfig.cmdSet = Constants.DCUII;
                GlobalVars.sysConfig.setCmdSet((int) Constants.DCUII);
                dcuTypeStr = "DCU II";
                break;
            case ((byte) 0xCC):
                //GlobalVars.sysConfig.cmdSet = Constants.DCUIV;
                GlobalVars.sysConfig.setCmdSet((int) Constants.DCUIV);
                dcuTypeStr = "DCU IV";
                break;
            default:
                //GlobalVars.sysConfig.cmdSet = Constants.DCUV;
                GlobalVars.sysConfig.setCmdSet((int) Constants.DCUV);
                dcuTypeStr = "Unknown";
                break;
        }


        // Block size
        offset = 7;
        GlobalVars.sysConfig.setBlockSize((int) tmpReceivedBuffer[offset]);
        switch(tmpReceivedBuffer[offset])
        {
        case 1:
            blockSizeStr = "128";
            break;
        case 2:
            blockSizeStr = "256";
            break;
        case 3:
            blockSizeStr = "512";
            break;
        case 4:
            blockSizeStr = "1024";
            break;
        default:
            blockSizeStr = "Unknown";
            break;
        }


        // Test Enable
        offset = 8;
        switch(tmpReceivedBuffer[offset])
        {
            case ((byte) 0xAA):
                GlobalVars.sysConfig.setTestEnable(1);
                testEnableStr = "Enabled";
                break;
            default:
                GlobalVars.sysConfig.setTestEnable(0);
                testEnableStr = "Disabled";
                break;
        }


        // Spare
        offset = 9;
        GlobalVars.sysConfig.setSpare((int)tmpReceivedBuffer[offset]);
        if(tmpReceivedBuffer[offset] == 0)
            spareStr = "0";
        else
            spareStr = "Unknown";

        // don't know what's this
        //GlobalVars.sysConfig.idSize = 2;
        GlobalVars.sysConfig.setIdSize(2);

        tempStringStatus = GlobalVars.gCommPortName + ", DCU " +
                           dcuAddressStr + ", " + 
                           baudRateStr + ", " +
                           dcuTypeStr + ", " +
                           blockSizeStr + ", " +
                           testEnableStr;
        jTextField1.setText(tempStringStatus);

        
        
        //---------------------------
        // Send Reboot Command
        //---------------------------
        cmdData.clear();
        GlobalVars.maintCommand.reboot(cmdData);        
        
        //---------------------------------------------
        // Send Read DCU ID Command
        //---------------------------------------------
        cmdData.clear();
        GlobalVars.dcuCommand.readDcuID(cmdData, false);                       
    }//GEN-LAST:event_mntmRebootActionPerformed

    private void mntmInitMaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmInitMaintActionPerformed
        TcmdData cmdData = new TcmdData();
        GlobalVars.maintCommand.maintCommand(cmdData);
    }//GEN-LAST:event_mntmInitMaintActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void mntmReadDcuIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmReadDcuIDActionPerformed
        TcmdData cmdData = new TcmdData();
        
        GlobalVars.dcuCommand.readDcuID(cmdData, true);        
    }//GEN-LAST:event_mntmReadDcuIDActionPerformed

    private void mntmUploadDataTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmUploadDataTableActionPerformed
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************        

        GlobalVars.testLoginPwd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        
        GlobalVars.testLoginPwd.setTitle("Upload Data Table");
        GlobalVars.testLoginPwd.setVisible(true);

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************                        
    }//GEN-LAST:event_mntmUploadDataTableActionPerformed

    private void mntmReadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmReadConfigActionPerformed
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************        

        readDcuConfig = new ReadDcuConfiguration();
        readDcuConfig.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        
        readDcuConfig.setTitle("Read DCU Configuration");
        readDcuConfig.setVisible(true);

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************                
    }//GEN-LAST:event_mntmReadConfigActionPerformed

    private void mntmConfigureDcuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmConfigureDcuActionPerformed
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************        
        
        GlobalVars.dcuConfig = new DcuConfigure();
        GlobalVars.dcuConfig.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GlobalVars.dcuConfig.setTitle("Configure DCU");
        GlobalVars.dcuConfig.setVisible(true);

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************                
    }//GEN-LAST:event_mntmConfigureDcuActionPerformed

    private void mntmConfigureDcuIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmConfigureDcuIDActionPerformed
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************        
        try {
            GlobalVars.commPort.serialPort.enableReceiveTimeout(5000);
            //GlobalVars.commPort.serialPort.disableReceiveTimeout();
      
            // Display the Config Unit ID dialog
            GlobalVars.configUnitId.setVisible(true);

            GlobalVars.commPort.serialPort.disableReceiveTimeout();
        }
        catch(UnsupportedCommOperationException ex){
            System.err.println(ex.getMessage());
            JOptionPane.showMessageDialog(null,"File not found.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.WARNING_MESSAGE);
        }        
        
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************        
    }//GEN-LAST:event_mntmConfigureDcuIDActionPerformed

    private void mntmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmExitActionPerformed
        // Are you sure you want to terminate the Utility Program?
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null,"Are you sure you want to terminate the Utility Program?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION))
        {
            //System.exit(0);
            Utilities.shutdownSystem();
        }

    }//GEN-LAST:event_mntmExitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                GlobalVars.dcuvFrkMain = new DcuVFrkMain();
                GlobalVars.dcuvFrkMain.setTitle("DCU V FRK" + Constants.SW_VERSION);                
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JMenuItem jShowCommDataWindow1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem mntmActivateBoot;
    private javax.swing.JMenuItem mntmCalcCrc;
    private javax.swing.JMenuItem mntmChangeBaudRate;
    private javax.swing.JMenuItem mntmChkBootVersion;
    private javax.swing.JMenuItem mntmConfigureDcu;
    private javax.swing.JMenuItem mntmConfigureDcuID;
    private javax.swing.JMenuItem mntmContWriting;
    private javax.swing.JMenuItem mntmDataDownload;
    private javax.swing.JMenuItem mntmDetectSerialPort;
    private javax.swing.JMenuItem mntmDisplayConfig;
    private javax.swing.JMenuItem mntmEraseData;
    private javax.swing.JMenuItem mntmExit;
    private javax.swing.JMenuItem mntmGetTempRecord;
    private javax.swing.JMenuItem mntmGseBaudRate;
    private javax.swing.JMenuItem mntmGseConfigure;
    private javax.swing.JMenuItem mntmInitMaint;
    private javax.swing.JMenuItem mntmInvalidateData;
    private javax.swing.JMenuItem mntmReadConfig;
    private javax.swing.JMenuItem mntmReadData;
    private javax.swing.JMenuItem mntmReadDcuID;
    private javax.swing.JMenuItem mntmReboot;
    private javax.swing.JMenuItem mntmRequestVer;
    private javax.swing.JMenuItem mntmReturnDcuStatus;
    private javax.swing.JMenuItem mntmRoBlockRead;
    private javax.swing.JMenuItem mntmShowCommData;
    private javax.swing.JMenuItem mntmSwUpgrade;
    private javax.swing.JMenuItem mntmTestBlockRead;
    private javax.swing.JMenuItem mntmUploadDataTable;
    private javax.swing.JMenuItem mntmWriteData;
    // End of variables declaration//GEN-END:variables
    private ReadDcuConfiguration readDcuConfig;
    private ReadDcuId readDcuId;

    
    private void initialize() throws IOException {
        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************               
        
        mntmExit.setText("Exit Program");
        mntmGseConfigure.setText("GSE Configure");
        mntmGseBaudRate.setText("GSE Baud Rate");
        mntmUploadDataTable.setText("Upload Data Table");
        mntmShowCommData.setText("Show Comm Data");
        mntmDetectSerialPort.setText("Detect Serial Port");
        mntmContWriting.setText("Continually Writing");
        mntmCalcCrc.setText("Calculate CRC");
        mntmConfigureDcuID.setText("Configure DCU ID");
        mntmSwUpgrade.setText("Software Upgrade");
        mntmGetTempRecord.setText("Get Temperature Record");
        mntmChkBootVersion.setText("Check BootLoader Version");
        mntmActivateBoot.setText("Activate BootLoader");
        mntmInitMaint.setText("Initiate Maintenance");
        mntmConfigureDcu.setText("Configure DCU");
        mntmRequestVer.setText("Request Version");
        mntmDisplayConfig.setText("Display Configuration");
        mntmReboot.setText("Reboot");
        mntmEraseData.setText("Erase Data");
        mntmInvalidateData.setText("Invalidate Data");
        mntmTestBlockRead.setText("Test Block Read");
        mntmRoBlockRead.setText("RO Block Read");
        mntmDataDownload.setText("Data Download");
        mntmReturnDcuStatus.setText("Return DCU Status");
        mntmReadData.setText("Read Data");
        mntmWriteData.setText("Write Data");
        mntmReadDcuID.setText("Read DCU ID");
        mntmReadConfig.setText("Read Configuration");
        mntmChangeBaudRate.setText("Change Baud Rate");

        this.setTitle("DCU V FRK" + Constants.SW_VERSION);
        
        GlobalVars.sysConfig = new TsysConfig();
        GlobalVars.dcuCommand = new TdcuCommand();
        GlobalVars.maintCommand = new TMaintCommand();  
        
        GlobalVars.configUnitId = new ConfigureUnitId();
        GlobalVars.configUnitId.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GlobalVars.configUnitId.setTitle("Configure DCU ID");
        GlobalVars.testLoginPwd = new TestLoginPwd();
        GlobalVars.testLoginPwd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GlobalVars.testLoginPwd.setTitle("Upload Engine Data Table");

        GlobalVars.commDataFrame = new CommunicationData();
        GlobalVars.commDataFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        
        GlobalVars.commDataFrame.setBounds(540,0,500,630);
        //GlobalVars.commDataFrame.setVisible(true);
        DefaultCaret caret = (DefaultCaret) GlobalVars.commDataFrame.jEditorPane1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        // Create the document component for appending text
        GlobalVars.commDataDoc = GlobalVars.commDataFrame.jEditorPane1.getDocument();
        
        
        GlobalVars.startProgrammingFrame = new StartProgramming();
        GlobalVars.startProgrammingFrame.setTitle("DCU V FRK" + Constants.SW_VERSION);
        GlobalVars.startProgrammingFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        
        //GlobalVars.startProgrammingFrame.setBounds(0,0,850,360);
        GlobalVars.startProgrammingFrame.setBounds(0,0,850,220);
        GlobalVars.startProgrammingFrame.setVisible(true);       
                               
        //-------------------------------------
        // Create the Progress Window
        //-------------------------------------
        GlobalVars.progressFrame = new ProgressFrame();                
        GlobalVars.progressFrame.setTitle("DCU V FRK" + Constants.SW_VERSION);        
        GlobalVars.progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        

        try
        {
            Runtime runtime = null;
            Process process = null;
            runtime = Runtime.getRuntime();
            process = runtime.exec("udisks --mount /dev/sdb1");                        
            process = runtime.exec("sudo chmod 777 /run");                        
            process = runtime.exec("sudo chmod 777 /run/lock");                        

        }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(null,"Error trying to detect the USB drive.\nThe Utility Program will shutdown now.\nPlease remove and plugin the USB drive if it was plugged-in previously.\nThen power up the laptop again.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
            //System.exit(0);                        
            
            Utilities.shutdownSystem();
        }        
    }
    
    byte[] concatenateByteArrays(byte[] a, byte[] b) {
        byte[] result = new byte[a.length + b.length]; 
        System.arraycopy(a, 0, result, 0, a.length); 
        System.arraycopy(b, 0, result, a.length, b.length); 
        return result;
    }     


    public void startAutoEdtProgramming()
    {
        int returnVal1 = JOptionPane.CANCEL_OPTION;
        int returnVal2 = 0;
        int returnVal3 = JOptionPane.YES_OPTION;
        int keepTryingFlag = JOptionPane.YES_OPTION;
        TcmdData cmdData;
        FileNameExtensionFilter filter;
        JFileChooser fileChooser;
        File testDirectory;
        File testFile;
        File baselineFile;       
        File finalStateFile;       
        File directory1 = null;
        File[] fList1 = null;
        boolean skipToFinalStateFileCreation = false;
        boolean skipNvmEraseEdtProgrammingChangePartNum = false;        
        String baselineFilename = new String("SN_");
        String finalStateFilename = new String("SN_");
        FileOutputStream outFile;
        tEngineData engineData;
        String newPartSerialNumber = new String();
        int numFillerSpaces = 0;
        String osName = new String();

        //---------------------------------------------------------------------------------------------------
        // Auto EDT programming steps
        //---------------------------------------------------------------------------------------------------
        // Step 1.  Set location to save DCU5 baseline and final-state files (decide path based on O/S type)
        // Step 2.  Verify we have read/write access to that location
        // Step 3.  Set full path based on O/S type        
        // Step 4.  Check the Part no. & Serial no.
        // Step 5.  Verify that the connected DCU V device has a part no. 3079530-1 or 3127069-01 // 3075879-01 or 3079530-01
        // Step 6.  Check if baseline file exist
        // Step 7.  Check if final-state file exist
        // Step 8.  Readback the DCU contents (entire memory)
        // Step 9.  Store the DCU memory contents into baseline DCU5 file
        // Step 10. Erase the NVM
        // Step 11. Program the new EDT into the DCU device
        // Step 12. Change the Part no. and Serial no.
        // Step 13. Readback the DCU contents (entire memory)
        // Step 14. Store the DCU memory contents into final-state DCU5 file
        //---------------------------------------------------------------------------------------------------
        
        
        //---------------------------------------------------------------------------------------------------
        // Step 1.  Set location to save DCU5 baseline and final-state files (decide path based on O/S type)
        //---------------------------------------------------------------------------------------------------
        // Ask operator for folder where to store DCU5 files if we
        // NOT in "QuietMode"
        //---------------------------------------------------------------------------------------------------
        filter = new FileNameExtensionFilter("DCU5 file", "dcu5", "dcu5");
        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        
        if (GlobalVars.gOperationMode.equals("QuietMode") == false) // NOT QuietMode
        {
            // Tell operator to select folder where to store the DCU5 files
            JOptionPane.showMessageDialog(null,"Please provide the directory where to store the DCU5 baseline and final-state files.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
            
            //---------------------------------------------------------------------------------------------------
            // Step 2.  Verify we have read/write access to that location
            //---------------------------------------------------------------------------------------------------
            Utilities.ProgressFrameSetTxt("Verify that the specified directory can be read and written...", (double) 0.01);
            returnVal1 = JFileChooser.CANCEL_OPTION;     // set returnVal to a dummy value initially
            while (returnVal1 != JFileChooser.APPROVE_OPTION)
            {
                // Display dialog to choose the Engine Data Table file
                returnVal1 = fileChooser.showOpenDialog(this);

                if(returnVal1 == JFileChooser.APPROVE_OPTION)
                {
                    // Store the selected
                    GlobalVars.gDataStorageDirectory = fileChooser.getSelectedFile().getAbsolutePath();        
                    testDirectory = new File(GlobalVars.gDataStorageDirectory);

                    //--------------------------------------------------------------------
                    // Verify that the Directory provided by the operator exist
                    //--------------------------------------------------------------------
                    if(testDirectory.isDirectory())
                    {
                        //--------------------------------------------------------------------
                        // Verify that we can read/write to the path provided by operator
                        //--------------------------------------------------------------------
                        Utilities.ProgressFrameSetTxt("Testing write/read access to file storage location...", (double) 0.01);   
                        try
                        {
                            if (GlobalVars.gOsName.equals("Windows"))                                
                                testFile = new File(GlobalVars.gDataStorageDirectory + "\\" + "testFile.txt");
                            else 
                                testFile = new File(GlobalVars.gDataStorageDirectory + "/" + "testFile.txt");
                            testFile.createNewFile();
                            testFile.delete();
                        }
                        catch (IOException e)
                        {
                            JOptionPane.showMessageDialog(null,"Unable to read and write to the directory.\nPlease ensure that you have read and write access to the specified directory.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                            // set returnVal1 to a dummy value so that we can go through the while-loop again
                            returnVal1 = JFileChooser.CANCEL_OPTION;
                        }
                    }                    
                    else
                    {
                        JOptionPane.showMessageDialog(null,GlobalVars.gDataStorageDirectory + "\nThis is an INVALID directory.\nPlease provide a valid directory.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                        // set returnVal1 to a dummy value so that we can go through the while-loop again
                        returnVal1 = JFileChooser.CANCEL_OPTION; 
                    }
                }
                else
                {                                                
                    // Warn that the user has selected "CANCEL".  Ask if he/she wants to terminate the program
                    returnVal2 = JOptionPane.showConfirmDialog(null,"You have selected CANCEL.\nYou must provide a valid directory for DCU5 storage.\nDo you want to terminate the Utility Program?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);

                    if(returnVal2 == JFileChooser.APPROVE_OPTION)
                    {
                        // Terminating program based on operator's selection
                        //System.exit(0);              
                        Utilities.shutdownSystem();
                    }
                }            
            } // while (returnVal1 != JFileChooser.APPROVE_OPTION)
            
            // Display both the Communication Window and Progress Window
            GlobalVars.commDataFrame.setVisible(true);
            GlobalVars.progressFrame.setVisible(true);
            
            GlobalVars.gElapsedTimer = new Timer();
            GlobalVars.gElapsedTimer.schedule(new ElapsedTime(),0,1000);            
        }                
        else // QuietMode
        {    
            //--------------------------------------------------------------------------
            // Step 3  
            // Decide the full path name based on the Operating System we are using
            //--------------------------------------------------------------------------
            osName = System.getProperty("os.name").toLowerCase();
            while (returnVal3 == JOptionPane.YES_OPTION)
            {
                try
                {
                    if (osName.indexOf("win") >= 0)
                    {
                        GlobalVars.gOsName = "Windows";

                        // We are using a Windows O/S
                        GlobalVars.gDataStorageDirectory = "C" + ":" + "\\";

                    }
                    else if (osName.indexOf("nux") >= 0)
                    {
                        GlobalVars.gOsName = "Linux";

                        //-----------------------------------------------------------------------
                        // For openSUSE 13.2 - we need to create the folder /media for 
                        // mounting the USB drive
                        //-----------------------------------------------------------------------
                        new File("/media").mkdir();
                        
                        // Wait for 4 seconds for USB drive to get mounted                        
                        try
                        {
                            TimeUnit.MILLISECONDS.sleep(4000);  // 3000ms delay
                        }
                        catch(InterruptedException ex) {}
                                                
                        // Do a "force mount" on all USB devices that are 
                        // plugged into the laptop that are not mounted
                        //
                        // Change access to the /run/lock folder to all Access = "777"                    
                        try
                        {
                            Runtime runtime = null;
                            Process process = null;
                            runtime = Runtime.getRuntime();
                            process = runtime.exec("udisks --mount /dev/sdb1");                        
                            process = runtime.exec("sudo chmod 777 /run");                        
                            process = runtime.exec("sudo chmod 777 /run/lock");                        

                        }
                        catch (IOException e)
                        {
                            returnVal3 = JOptionPane.showConfirmDialog(null,"No USB drive is plugged into the laptop or no USB drive is detected.\nIf the USB drive is plugged into the laptop previously, please remove it and plug it into the laptop again.\nClick YES to try detecting USB drive again.\nClick NO to shutdown the Utility Program.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
                            //System.exit(0);                        
                            if (returnVal3 == JOptionPane.NO_OPTION)
                            {
                                Utilities.shutdownSystem();
                            }
                            else
                            {
                                // do nothing
                                // Go through the loop again to try detecting the USB drive again
                            }
                        }                        
                        
                        directory1 = new File("/media"); // this is where all mounted USB drives show up

                        // get all the files from a directory
                        fList1 = directory1.listFiles();

                        if (fList1.length > 0)
                        {
                            if (fList1[0].isDirectory())            // fList1[0] must be the USB-drive directory
                            {
                                GlobalVars.gDataStorageDirectory = fList1[0].getAbsolutePath();                             
                                //--------------------------------------------------------------------
                                // Verify that we can read/write to the path provided by operator
                                //--------------------------------------------------------------------
                                Utilities.ProgressFrameSetTxt("Testing write/read access to file storage location...", (double) 0.01);   
                                try
                                {
                                    testFile = new File(GlobalVars.gDataStorageDirectory + "/" + "testFile.txt");
                                    testFile.createNewFile();
                                    testFile.delete();
                                }
                                catch (IOException e)
                                {
                                    JOptionPane.showMessageDialog(null,"Unable to read and write to the directory.  Please ensure that USB drive is plugged into the laptop and\nyou have write/read access to the USB storage device.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                                    JOptionPane.showMessageDialog(null,"Utility program is unable to continue.\nThe Utility Program will shutdown now.\nThe laptop power will be turned off.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);

                                    Utilities.shutdownSystem();
                                    
                                    // set returnVal1 to a dummy value so that we can go through the while-loop again
                                    //returnVal1 = JFileChooser.CANCEL_OPTION;
                                }
                                
                                // Set the exit flag to get out of the loop
                                returnVal3 = JOptionPane.CANCEL_OPTION;
                            }
                            else
                            {
                                // We have a problem !!!
                                // There is most probably no USB drive plugged into the laptop    

                                // Tell the operator that there is no USB drive detected,  
                                // Tell the operator to remove and plug-in the USB drive again if it was plugged into the laptop
                                // The program will be shutting down
                                returnVal3 = JOptionPane.showConfirmDialog(null,"No USB drive is plugged into the laptop or no USB drive is detected.\nIf the USB drive is plugged into the laptop previously, please remove it and plug it into the laptop again.\nClick YES to try detecting USB drive again.\nClick NO to shutdown the Utility Program.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
                                //System.exit(0);                        
                                if (returnVal3 == JOptionPane.NO_OPTION)
                                {
                                    Utilities.shutdownSystem();
                                }
                                else
                                {
                                    // do nothing
                                    // Go through the loop again to try detecting the USB drive again
                                }
                            }                        
                        }
                        else
                        {
                            // We have a problem !!!
                            // There is most probably no USB drive plugged into the laptop    

                            // Tell the operator that there is no USB drive detected,  
                            // Tell the operator to remove and plug-in the USB drive again if it was plugged into the laptop
                            // The program will be shutting down
                            returnVal3 = JOptionPane.showConfirmDialog(null,"No USB drive is plugged into the laptop or no USB drive is detected.\nIf the USB drive is plugged into the laptop previously, please remove it and plug it into the laptop again.\nClick YES to try detecting USB drive again.\nClick NO to shutdown the Utility Program.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
                            //System.exit(0);                                                
                            if (returnVal3 == JOptionPane.NO_OPTION)
                            {
                                Utilities.shutdownSystem();
                            }
                            else
                            {
                                // do nothing
                                // Go through the loop again to try detecting the USB drive again
                            }
                        }
                    }                
                }
                catch (NullPointerException ex)
                {
                    // Problem accessing the USB drive, it most probably isn't plugged into the laptop
                    returnVal3 = JOptionPane.showConfirmDialog(null,"No USB drive is plugged into the laptop or no USB drive is detected.\nIf the USB drive is plugged into the laptop previously, please remove it and plug it into the laptop again.\nClick YES to try detecting USB drive again.\nClick NO to shutdown the Utility Program.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
                    //System.exit(0);
                    if (returnVal3 == JOptionPane.NO_OPTION)
                    {
                        Utilities.shutdownSystem();
                    }
                    else
                    {
                        // do nothing
                        // Go through the loop again to try detecting the USB drive again
                    }
                } // catch (NullPointerException ex)
            } // while (returnVal3 == JOptionPane.YES_OPTION)            
        } // else // QuietMode                        
        //-------------------------------------------------------------------------------

//TBD005
// Display both the Communication Window and Progress Window
//GlobalVars.commDataFrame.setVisible(true);
//GlobalVars.progressFrame.setVisible(true);
        
        //========================================================
        // Connect to DCU and get its current configuration
        //========================================================
        Utilities.ProgressFrameSetTxt("Attempting communication with connected DCU device...", (double) 0.01);   
        dcuConnectAndGetConfig();
        
        
        //--------------------------------------------------------------------
        // Step 4.  Check the Part no. & Serial no.
        //--------------------------------------------------------------------
        Utilities.ProgressFrameSetTxt("Checking DCU V Part no. and Serial no....", (double) 0.01);
        
        cmdData = new TcmdData();
        returnVal1 = 1;
        keepTryingFlag = JOptionPane.YES_OPTION;
        while ((returnVal1 != 0) && (keepTryingFlag == JOptionPane.YES_OPTION))        
        {
            //cmdData = new TcmdData();
            cmdData.clear();
            returnVal1 = GlobalVars.dcuCommand.readDcuID(cmdData, false);

            if (returnVal1 != 0)
            {
                keepTryingFlag = JOptionPane.showConfirmDialog(null,"Try connection to DCU again?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
            }
        }
        
        // Set the DCU V part number, serial number on the Progress Window
        GlobalVars.progressFrame.jLabel9.setText(GlobalVars.PART_NUMBER);
        GlobalVars.progressFrame.jLabel10.setText(GlobalVars.SERIAL_NUMBER);

        if (GlobalVars.PART_NUMBER.equals("3079530-01") == true)
        {
            returnVal1 = JOptionPane.showConfirmDialog(null,"The connected DCU device has part number 3079530-01.\nDo you want to proceed with DCU reprogramming?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
            if (returnVal1 == JOptionPane.NO_OPTION)
            {
                JOptionPane.showMessageDialog(null,"Since you have selected to stop the Upgrade Process.\nThe Utility Program will shutdown and turn off the laptop.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                Utilities.shutdownSystem();
            }
        }
                
        // Since communication is established, hide the Comm. Window if we are in Quiet Mode
        if (GlobalVars.gOperationMode.equals("QuietMode") == true)
        {
            GlobalVars.commDataFrame.setBounds(0,0,500,630); //<TBD>
            GlobalVars.commDataFrame.setVisible(false);
        }
//TBD
// Display both the Communication Window and Progress Window
//GlobalVars.commDataFrame.setVisible(true);
//GlobalVars.progressFrame.setVisible(true);
        
        // If there is a problem, terminate program
        if (returnVal1 != JOptionPane.YES_OPTION)
        {
            JOptionPane.showMessageDialog(null,"Utility Program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
            //System.exit(0);            
            Utilities.shutdownSystem();
        }
        // If everything is OK, continue with the program
        else
        {
            //------------------------------------------------------------------------------------
            // Step 5
            // Verify that the connected DCU V device has a part no. 3075879-01 or 3079530-01
            //------------------------------------------------------------------------------------

            if ((GlobalVars.PART_NUMBER.equals("3079530-01")) || (GlobalVars.PART_NUMBER.equals("3127069-01")))
            {
                // Everything is good, we can continue with the rest of the function
            }
            else
            {                                
                if (Constants.CUSTOMER.equals("P&WC") == true)
                {
                    JOptionPane.showMessageDialog(null,"Part number of connected DCU is not 3079530-01 or 3127069-01 !\nPlease verify that the correct DCU device with P/N 3075879-01 is connected to the FPK.\nThe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);

                    Utilities.shutdownSystem();
                }
                else
                {        
                    // For SE-C, we can continue
                    // Show both the DCU V FPK main window & communication window
                    JOptionPane.showMessageDialog(null,"Part number of connected DCU is not 3079530-01 or 3127069-01 !","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                    GlobalVars.dcuvFrkMain.setVisible(true);
                    GlobalVars.commDataFrame.setVisible(true);
                }
            }
        } // else                
        //-------------------------------------------------------------------------------
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        baselineFilename += GlobalVars.SERIAL_NUMBER;
        baselineFilename += "PN_";
        baselineFilename += "3079530-01";
        baselineFilename += "_";
        baselineFilename += GlobalVars.sysConfig.getBaudRate();
        baselineFilename += "_";
        switch(GlobalVars.sysConfig.getCmdSet())
        {
            case (int) Constants.DCUII:
                baselineFilename += "1";
                break;
            case (int) Constants.DCUIV:
                baselineFilename += "2";
                break;
            case (int) Constants.DCUV:
                baselineFilename += "3";
                break;
            default:
                baselineFilename += "3";
                break;
        }
        baselineFilename += ".DCU5";

        finalStateFilename += GlobalVars.SERIAL_NUMBER;
        finalStateFilename += "PN_";
        finalStateFilename += "3127069-01";
        finalStateFilename += "_";
        finalStateFilename += GlobalVars.sysConfig.getBaudRate();
        finalStateFilename += "_";
        switch(GlobalVars.sysConfig.getCmdSet())
        {
            case (int) Constants.DCUII:
                finalStateFilename += "1";
                break;
            case (int) Constants.DCUIV:
                finalStateFilename += "2";
                break;
            case (int) Constants.DCUV:
                finalStateFilename += "3";
                break;
            default:
                finalStateFilename += "3";
        }
        finalStateFilename += ".DCU5";

        Utilities.ProgressFrameSetTxt("Verify that DCU5 Baseline file does not exist...", (double) 0.01);   
        baselineFile = new File(GlobalVars.gDataStorageDirectory + "//" + baselineFilename);

        //
        // Set a flag to determine if we need to skip the baseline file generation and skip ahead to the final-state file generation
        //
        skipToFinalStateFileCreation = false;
        
        
        //------------------------------------------------------------------------
        // Step 6.  Check if baseline file exist
        //------------------------------------------------------------------------
        // Determine what to do based one whether the baseline file exists
        //------------------------------------------------------------------------
        if (baselineFile.exists() == true)            
        {
            // Since the baseline file exist, there must have been an interruption during the previous programming
            // We need to decide what to do depending on the Part no. of the connected DCU V device

            //------------------------------------------------------------------------
            // Step 1.4
            // Decide what to do based on the Part no. of the connected DCU V device
            //------------------------------------------------------------------------
            returnVal1 = JOptionPane.CANCEL_OPTION;
            if (GlobalVars.PART_NUMBER.equals("3079530-01"))
            {                
                // Give the operator a warning that the Baseline file exist
                // Ask the operator if he/she still wants to proceed with the programming.
                // If yes, we will skip the "read-back" of the DCU device's memory
                returnVal1 = JOptionPane.showConfirmDialog(null,"DCU5 baseline file exist.\nAn interrupted reprogramming session may have occured.\nSkip read-back and proceed with erasing the connected DCU V device for the reprogramming process?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);

                if (returnVal1 == JOptionPane.YES_OPTION)
                {
                    // Inform operator of the utility's next step
                    Utilities.ProgressFrameSetTxt("Extracting Block 0, 1, 9 and 205 from existing baseline file...", (double) 45);
                    
                    // Do not safe baseline file (no read-back), just proceed to program the EDT file and create DCU5 final-state file
                    skipToFinalStateFileCreation = true;
                    
                    
                    // we have to extract Block 0, 1, 9, 205 to create the data blocks for 
                    // the final DCU P/N 3079530-01
                    FileInputStream inFileStream = null;
                    byte[] baselineFileBuffer= null;

                    // Open the baseline file
                    try
                    {
                        inFileStream = new FileInputStream(baselineFile);
                    }
                    catch (FileNotFoundException ex)
                    {
                        System.err.println(ex.getMessage());
                    }
                            
                    
                    // Read the first two bytes that contains the bit-map for Blocks 0, 1, 5, 9
                    //baselineFileBuffer = new byte[header+Block0+Block1+Block4+Block5+Block9+
                    //                             Block10+Block11+Block12+Block13+Block14+Block15+
                    //                             Block16+Block17+Block18+Block19+Block20+Block21+
                    //                             Block22+Block23+Block24+Block25+Block26+Block27+
                    //                             Block28+Block29+Block30+Block31+Block32+Block33+
                    //                             Block34+Block35+Block36+Block40+Block41+Block42+
                    //                             Block43+Block44+Block45+Block46+Block47+Block48+
                    //                             Block49+Block50+Block51+Block52+Block53+Block54+
                    //                             Block55+Block56+Block57+Block58+Block59+Block60+
                    //                             Block61+Block62+Block63+Block64+Block65+Block66+
                    //                             Block67+Block68+Block69+Block70+Block71+Block72+
                    //                             Block73+Block74+Block75+Block76+Block77+Block78+
                    //                             Block79+Block80+Block81+Block82+Block83+Block84+
                    //                             Block85+Block86+Block87+Block88+Block89+Block90+
                    //                             Block91+Block92+Block93+Block94+Block95+Block96+
                    //                             Block204+Block205                    
                    baselineFileBuffer = new byte[256+128+128+128+128+128+(6*14*128)+128+128];
                    
                    try
                    {
                        int nRead = inFileStream.read(baselineFileBuffer);
                    }
                    catch (IOException ex)
                    {
                        System.err.println(ex.getMessage());
                        JOptionPane.showMessageDialog(null,"Error while reading DCU5 baseline file.\nBaseline file contents are invalid or not DCU5 file format compliant.\nUtility program unable to continue with upgrade process.\nThe Utility program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                    }
                    
                    //---------------------------------------------------------
                    // Close the baseline file since we don't need it anymore
                    //---------------------------------------------------------
                    try
                    {
                        inFileStream.close();
                    }
                    catch (IOException ex)
                    {
                        System.err.println(ex.getMessage());
                        // No error message.  Its not critical that we couldn't close the baseline file.  
                        // We can still complete the reprogramming without closing the file.
                    }                    
         
                    final int BASELINE_BLOCK_0_MASK = 0x01;
                    final int BASELINE_BLOCK_1_MASK = 0x02;
//                  final int BASELINE_BLOCK_5_MASK = 0x20;
                    final int BASELINE_BLOCK_9_MASK = 0x02;
                    final int BASELINE_BLOCK_205_MASK = 0x20;
                    int baselineDataIndex = 0;
                    tEngineDataBlock tempEngineDataBlock = null;
                    
                    //--------------------------------------------------------------------------------------------
                    // Copy over the byte data for Blocks 0, 1 and 205.  Block #9 needs to be cleared and programmed
                    // into the DCU P/N 3127069-01
                    //
                    // Using BIT set in the header to parse through DCU V Baseline file
                    // 1. Step through the header and increment the index into baselineFileBuffer after each loop
                    // 2. Once the step hits Block 0,1,9 and 205, copy the data into tempEngineDataBlock
                    // 3. Only step through the baseline header up to byte 25 as it contains Block #205 that we are intersted
                    //--------------------------------------------------------------------------------------------

                    int headerIndex = 0;
                    int headerBitIndex = 0;
                    int offsetIntoBaselineFile = 0;
/*                    
                    for (int yy=0;yy<=25;yy++)                    
                    {
                        for (int zz=0;zz<8;zz++)                    
                        {
                            // Sift through each bit checking if its set
                            // If its set, increment an offset by 1
                            if ((baselineFileBuffer[yy] & (0x1 << zz)) > 0)
                            {
                                offsetIntoBaselineFile += 1;    

                                // The associated bit for Block #0 is in Byte #0 of header
                                // The associated bit for Block #1 is in Byte #0 of header
                                // The associated bit for Block #205 is in Byte #25 of header
                                if (((yy == 0)  && (baselineFileBuffer[yy] & BASELINE_BLOCK_0_MASK)    == BASELINE_BLOCK_0_MASK) ||
                                    ((yy == 0)  && (baselineFileBuffer[yy] & BASELINE_BLOCK_1_MASK)    == BASELINE_BLOCK_1_MASK) ||
                                    ((yy == 25) && (baselineFileBuffer[yy] & BASELINE_BLOCK_205_MASK)  == BASELINE_BLOCK_205_MASK))
                                {
                                    // Create Block 0, 1 or 205 for final DCU P/N 3127069-01
                                    tempEngineDataBlock = new tEngineDataBlock();

                                    for (int aa=0;aa<128;aa+=2)                    
                                    {
                                        tempEngineDataBlock.data[baselineDataIndex] = (int) ((((int) baselineFileBuffer[256 + (yy*128*8) + (zz*128) + aa]) << 8) & 0xFFFF);
                                        tempEngineDataBlock.data[baselineDataIndex++] += (int) ((int) baselineFileBuffer[256 + (yy*128*8) + (zz*128) + aa + 1] & 0xFF);
                                    }

                                    if ((yy == 0)  && ((baselineFileBuffer[yy] & BASELINE_BLOCK_0_MASK) == BASELINE_BLOCK_0_MASK))
                                        tempEngineDataBlock.blockId = 0;
                                    else if ((yy == 1)  && ((baselineFileBuffer[yy] & BASELINE_BLOCK_1_MASK) == BASELINE_BLOCK_1_MASK))
                                        tempEngineDataBlock.blockId = 1;
                                    else if ((yy == 205)  && ((baselineFileBuffer[yy] & BASELINE_BLOCK_205_MASK) == BASELINE_BLOCK_205_MASK))
                                        tempEngineDataBlock.blockId = 205;
                                }

                                //
                                // Clear all the byte date in Block #9
                                // The associated bit for Block #9 is in Byte #1 of header
                                if ((yy == 1)  && ((baselineFileBuffer[yy] & BASELINE_BLOCK_9_MASK) == BASELINE_BLOCK_9_MASK))
                                {
                                    // Create Block 9 for final DCU P/N 3127069-01
                                    tempEngineDataBlock = new tEngineDataBlock();

                                    Arrays.fill(tempEngineDataBlock.data, (byte) 0);                                    
                                    tempEngineDataBlock.blockId = 9;
                                }
                                
                                tempEngineDataBlock.dataIndex = 64;
                                //---------------------------------------------------------
                                // Adding Block 0, 1, 9 or 205 to the engineDataBlockList for upload later
                                //---------------------------------------------------------
                                GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);                                
                            }
                        }                                                                        
                    }                                    
*/
                    
/*                
                    // Verify that Block 0 data exist as indicated by the Bit-Map in the header of the DCU5 baseline file
                    if ((baselineFileBuffer[0] & BASELINE_BLOCK_0_MASK) == BASELINE_BLOCK_0_MASK)
                    {
                        // Create Block 0 for final DCU P/N 3079530-01
                        tempEngineDataBlock = new tEngineDataBlock();

                        for (int yy=0;yy<128;yy+=2)                    
                        {
                            //tempEngineDataBlock.data[baselineDataIndex] = baselineFileBuffer[headerBlock + Block0_baselineDataLowerByte];
                            tempEngineDataBlock.data[baselineDataIndex] = (int) ((((int) baselineFileBuffer[256+yy]) << 8) & 0xFFFF);
                            //tempEngineDataBlock.data[baselineDataIndex] += baselineFileBuffer[headerBlock + Block0_baselineDataUpperByte];
                            tempEngineDataBlock.data[baselineDataIndex++] += (int) ((int) baselineFileBuffer[256+yy+1] & 0xFF);
                        }                                                                        
                        tempEngineDataBlock.blockId = 0;
                        tempEngineDataBlock.dataIndex = 64;

                        //---------------------------------------------------------
                        // Adding Block 0 to the engineDataBlockList for upload later
                        //---------------------------------------------------------
                        GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);

                        
                        if ((baselineFileBuffer[0] & BASELINE_BLOCK_1_MASK) == BASELINE_BLOCK_1_MASK)
                        {
                            // Create Block 1 for final DCU P/N 3079530-01
                            tempEngineDataBlock = new tEngineDataBlock();

                            baselineDataIndex = 0;
                            for (int yy=0;yy<128;yy+=2)                    
                            {
                                //tempEngineDataBlock.data[baselineDataIndex] = baselineFileBuffer[headerBlock + Block0 + Block1_baselineDataLowerByte];
                                tempEngineDataBlock.data[baselineDataIndex] = (int) ((((int) baselineFileBuffer[256+128+yy]) << 8) & 0xFFFF);
                                //tempEngineDataBlock.data[baselineDataIndex] += baselineFileBuffer[headerBlock + Block0 + Block1_baselineDataUpperByte];
                                tempEngineDataBlock.data[baselineDataIndex++] += (int) ((int) baselineFileBuffer[256+128+yy+1] & 0xFF);
                            }                                                                        
                            tempEngineDataBlock.blockId = 1;
                            tempEngineDataBlock.dataIndex = 64;

                            //---------------------------------------------------------
                            // Adding Block 1 to the engineDataBlockList for upload later
                            //---------------------------------------------------------
                            GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);
                            
                            if ((baselineFileBuffer[0] & BASELINE_BLOCK_5_MASK) == BASELINE_BLOCK_5_MASK)
                            {
                                // Create Block 205 for final DCU P/N 3079530-01
                                tempEngineDataBlock = new tEngineDataBlock();

                                baselineDataIndex = 0;
                                for (int yy=0;yy<128;yy+=2)                    
                                {
                                    if ((yy == 42) ||       // ACCSTRTS_E     offset 42
                                        (yy == 44) ||       // ACCINFLSTRTS_E offset 44
                                        (yy == 46) ||       // ACCNUMFL_E     offset 46
                                        (yy == 64) ||       // ENG_RUN_CRS_E  offset 64
                                        (yy == 66) ||       // ENG_RUN_FIN_E  offset 66
                                        (yy == 80) ||       // ENGFLTM_CRS_E  offset 80
                                        (yy == 82) ||       // ENGFLTM_FIN_E  offset 82
                                        (yy == 96) ||       // ACCSTRTSFLT_E  offset 96
                                        (yy == 112)||       // SPARE          offset 112
                                        (yy == 114)||       // SPARE          offset 114
                                        (yy == 116)||       // SPARE          offset 116
                                        (yy == 118)||       // SPARE          offset 118
                                        (yy == 120)||       // SPARE          offset 120
                                        (yy == 122)||       // SPARE          offset 122
                                        (yy == 124)||       // SPARE          offset 124
                                        (yy == 126))        // SPARE          offset 126
                                    {
                                        // The values at these specific offsets need to be wiped to 0
                                        tempEngineDataBlock.data[baselineDataIndex++] = 0;
                                    }
                                    else
                                    {
                                        //tempEngineDataBlock.data[baselineDataIndex] = baselineFileBuffer[headerBlock + Block0 + Block1 + Block4 + Block5_baselineDataLowerByte];
                                        tempEngineDataBlock.data[baselineDataIndex] = (int) ((((int) baselineFileBuffer[256+128+128+128+yy]) << 8) & 0xFFFF);
                                        //tempEngineDataBlock.data[baselineDataIndex] += baselineFileBuffer[headerBlock + Block0 + Block1 + Block4 + Block5_baselineDataUpperByte];
                                        tempEngineDataBlock.data[baselineDataIndex++] += (int) ((int) baselineFileBuffer[256+128+128+128+yy+1] & 0xFF);                                        
                                    }
                                    
                                }                                                                        
                                tempEngineDataBlock.blockId = 205;
                                tempEngineDataBlock.dataIndex = 64;

                                //---------------------------------------------------------
                                // Adding Block 205 to the DataBlockList for upload later
                                //---------------------------------------------------------
                                GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);
                                
                                
                            // Block #9 have all data byte entries within this specifc data block set to 0x00
                            if ((baselineFileBuffer[1] & BASELINE_BLOCK_9_MASK) == BASELINE_BLOCK_9_MASK)
                            {
                                // Create Block 9 for final DCU P/N 3127069-01
                                tempEngineDataBlock = new tEngineDataBlock();

                                baselineDataIndex = 0;
                                for (int yy=0;yy<128;yy+=2)                    
                                {
                                    tempEngineDataBlock.data[baselineDataIndex] = (int) 0;
                                    //tempEngineDataBlock.data[baselineDataIndex] += baselineFileBuffer[headerBlock + Block0 + Block1+ Block4 + Block5 + Block9_baselineDataUpperByte];
                                    tempEngineDataBlock.data[baselineDataIndex++] += (int) 0;
                                }                                                                        
                                tempEngineDataBlock.blockId = 9;
                                tempEngineDataBlock.dataIndex = 64;

                                //---------------------------------------------------------
                                // Adding Block 9 to the engineDataBlockList for upload later
                                //---------------------------------------------------------
                                GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);

                                
                                if ((baselineFileBuffer[25] & BASELINE_BLOCK_205_MASK) == BASELINE_BLOCK_205_MASK)
                                {
                                    // Create Block 205 for final DCU P/N 3127069-01
                                    tempEngineDataBlock = new tEngineDataBlock();

                                    baselineDataIndex = 0;
                                    for (int yy=0;yy<128;yy+=2)                    
                                    {
                                        //tempEngineDataBlock.data[baselineDataIndex] = baselineFileBuffer[headerBlock + Block0 + Block1 + Block4 + 
                                        //                             Block10+Block11+Block12+Block13+Block14+Block15+
                                        //                             Block16+Block17+Block18+Block19+Block20+Block21+
                                        //                             Block22+Block23+Block24+Block25+Block26+Block27+
                                        //                             Block28+Block29+Block30+Block31+Block32+Block33+
                                        //                             Block34+Block35+Block36+Block40+Block41+Block42+
                                        //                             Block43+Block44+Block45+Block46+Block47+Block48+
                                        //                             Block49+Block50+Block51+Block52+Block53+Block54+
                                        //                             Block55+Block56+Block57+Block58+Block59+Block60+
                                        //                             Block61+Block62+Block63+Block64+Block65+Block66+
                                        //                             Block67+Block68+Block69+Block70+Block71+Block72+
                                        //                             Block73+Block74+Block75+Block76+Block77+Block78+
                                        //                             Block79+Block80+Block81+Block82+Block83+Block84+
                                        //                             Block85+Block86+Block87+Block88+Block89+Block90+
                                        //                             Block91+Block92+Block93+Block94+Block95+Block96+
                                        //                             Block204+Block205 + Block5_baselineDataLowerByte];
                                        tempEngineDataBlock.data[baselineDataIndex] = (int) ((((int) baselineFileBuffer[256+128+128+128+(6*14*128)+128+128+yy]) << 8) & 0xFFFF);
                                        //tempEngineDataBlock.data[baselineDataIndex] += baselineFileBuffer[headerBlock + Block0 + Block1 + Block4 +
                                        //                             Block10+Block11+Block12+Block13+Block14+Block15+
                                        //                             Block16+Block17+Block18+Block19+Block20+Block21+
                                        //                             Block22+Block23+Block24+Block25+Block26+Block27+
                                        //                             Block28+Block29+Block30+Block31+Block32+Block33+
                                        //                             Block34+Block35+Block36+Block40+Block41+Block42+
                                        //                             Block43+Block44+Block45+Block46+Block47+Block48+
                                        //                             Block49+Block50+Block51+Block52+Block53+Block54+
                                        //                             Block55+Block56+Block57+Block58+Block59+Block60+
                                        //                             Block61+Block62+Block63+Block64+Block65+Block66+
                                        //                             Block67+Block68+Block69+Block70+Block71+Block72+
                                        //                             Block73+Block74+Block75+Block76+Block77+Block78+
                                        //                             Block79+Block80+Block81+Block82+Block83+Block84+
                                        //                             Block85+Block86+Block87+Block88+Block89+Block90+
                                        //                             Block91+Block92+Block93+Block94+Block95+Block96+
                                        //                             Block204+Block205 + Block5_baselineDataUpperByte];
                                        tempEngineDataBlock.data[baselineDataIndex++] += (int) ((int) baselineFileBuffer[256+128+128+128+(6*14*128)+128+128+yy+1] & 0xFF);                                                                            
                                    }                                                                        
                                    tempEngineDataBlock.blockId = 205;
                                    tempEngineDataBlock.dataIndex = 64;

                                    //---------------------------------------------------------
                                    // Adding Block 205 to the DataBlockList for upload later
                                    //---------------------------------------------------------
                                    GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);                                

                                    
                                    
                                    //---------------------------------------------------------
                                    // Close the baseline file since we don't need it anymore
                                    //---------------------------------------------------------
                                    try
                                    {
                                    inFileStream.close();
                                    }
                                    catch (IOException ex)
                                    {
                                        System.err.println(ex.getMessage());
                                        // No error message.  Its not critical that we couldn't close the baseline file.  
                                        // We can still complete the reprogramming without closing the file.
                                    }
                                    
                                } // if ((baselineFileBuffer[1] & BASELINE_BLOCK_9_MASK) == BASELINE_BLOCK_9_MASK)
                                else
                                {                        
                                    JOptionPane.showMessageDialog(null,"Error while reading DCU5 baseline file.\nData Block 9 not present in baseline file.\nUtility program unable to continue.\nPlease remove verify contents of baseline file to be correct or remove it from the USB storage device.\nRestart the DCU upgrade process again after removal.\nThe Utility program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                                    Utilities.shutdownSystem();                        
                                } // else ((baselineFileBuffer[1] & BASELINE_BLOCK_9_MASK) == BASELINE_BLOCK_9_MASK)
                            } // if ((baselineFileBuffer[0] & BASELINE_BLOCK_5_MASK) == BASELINE_BLOCK_5_MASK)
                            else
                            {                        
                                JOptionPane.showMessageDialog(null,"Error while reading DCU5 baseline file.\nData Block 5 not present in baseline file.\nUtility program unable to continue.\nPlease remove verify contents of baseline file to be correct or remove it from the USB storage device.\nRestart the DCU upgrade process again after removal.\nThe Utility program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                                Utilities.shutdownSystem();                        
                            } // else ((baselineFileBuffer[0] & BASELINE_BLOCK_5_MASK) == BASELINE_BLOCK_5_MASK)
                        } // if ((baselineFileBuffer[0] & BASELINE_BLOCK_1_MASK) == BASELINE_BLOCK_1_MASK)
                        else
                        {                        
                            JOptionPane.showMessageDialog(null,"Error while reading DCU5 baseline file.\nData Block 1 not present in baseline file.\nUtility program unable to continue.\nPlease remove verify contents of baseline file to be correct or remove it from the USB storage device.\nRestart the DCU upgrade process again after removal.\nThe Utility program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                            Utilities.shutdownSystem();                        
                        } // else ((baselineFileBuffer[0] & BASELINE_BLOCK_1_MASK) == BASELINE_BLOCK_1_MASK)
                    } // if ((baselineFileBuffer[0] & BASELINE_BLOCK_0_MASK) == BASELINE_BLOCK_0_MASK)
                    else
                    {                        
                        JOptionPane.showMessageDialog(null,"Error while reading DCU5 baseline file.\nData Block 0 not present in baseline file.\nUtility program unable to continue.\nPlease remove verify contents of baseline file to be correct or remove it from the USB storage device.\nRestart the DCU upgrade process again after removal.\nThe Utility program will terminate now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                        Utilities.shutdownSystem();                        
                    } // else ((baselineFileBuffer[0] & BASELINE_BLOCK_0_MASK) == BASELINE_BLOCK_0_MASK)
*/
                }
                else
                {
                    // Since the operator decided not to proceed with the EDT programming,
                    // notify the operator that the Utility program will shut down 
                    JOptionPane.showMessageDialog(null,"Since you chose not to proceed with Upgrade, the Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                    //System.exit(0);
                    Utilities.shutdownSystem();
                }
            }
            else if (GlobalVars.PART_NUMBER.equals("3127069-01"))
            {
                //----------------------------------------------------------------------------------
                // Inform the operator that the connected DCU V device has PART_NUMBER 3127069-01
                //----------------------------------------------------------------------------------
                JOptionPane.showMessageDialog(null,"The connected DCU V device has part number 3127069-01.\nA possible interruption during the DCU Upgrade process may have occured previously.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                
                //---------------------------------------------------------------------------------------------------
                // Step 7.  Check if final-state file exist
                //---------------------------------------------------------------------------------------------------
                // Since we the part no. of the connected DCU V device is "3127069-01",
                // Could this device have completed its programming previously
                // and the operator accidentally connected it to the Utility Program for programming?
                Utilities.ProgressFrameSetTxt("Verify that DCU5 Final-state file does not exist...", (double) 0.01);
                
                //------------------------------------------------------------
                // Check if the final-state file exist
                //------------------------------------------------------------
                if (GlobalVars.gOsName.equals("Windows"))
                    finalStateFile = new File(GlobalVars.gDataStorageDirectory + "\\" + finalStateFilename);
                else
                    finalStateFile = new File(GlobalVars.gDataStorageDirectory + "/" + finalStateFilename);
                if (finalStateFile.exists() == true)            
                {
                    // Since both the baseline and final-state file exists and we have the part
                    // no. of the connected DCU V device is "3079530-01", we have nothing to do.
                    // This device has been programmed previously.
                    JOptionPane.showMessageDialog(null,"Both the DCU5 baseline and final-state files exist at the root or specified directory of the USB drive.\nThere is nothing for the Utility Program to do.\nThe Upgrade has been performed previously.\nThe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                    //System.exit(0);
                    Utilities.shutdownSystem();
                }
                else
                {
                    //----------------------------------------------------------------------------------------
                    // Since the final-state file does not exist (but baseline file exist),
                    // a interruption programming must have happened previously (or the operator plugged-in
                    // the wrong DCU V unit for upgrade
                    //
                    // Ask the operator is the Utility Program should continue with EDT programming
                    // If yes => erase NVM and program the EDT
                    // If no => inform operator that the Utility Program will shutdown
                    //----------------------------------------------------------------------------------------
                    returnVal3 = JOptionPane.showConfirmDialog(null,"No final-state DCU5 file found in the root directory of the USB drive.\nDo you want to resume with the DCU Upgrade process?\nThis will download all the data blocks from the connected DCU and create the final-state file on the USB drive.\nClick YES to resume the Upgrade process.\nClick NO to stop the Upgrade process and shutdown the Utility Program.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);                    
                    
                    if (returnVal3 == JOptionPane.YES_OPTION)
                    {
                        skipToFinalStateFileCreation = true;
                        skipNvmEraseEdtProgrammingChangePartNum = true;                        
                        
                        // Inform operator of the utility's next step
                        Utilities.ProgressFrameSetTxt("Proceeding to download all data blocks and generate final-state file...", (double) 45);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Since you chose not to continue with the DCU Upgrade process,\nthe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                        //System.exit(0);
                        Utilities.shutdownSystem();
                    }
                }
            }                
        }
        else // Baseline file NOT found
        {
            //-----------------------------------------------------------------
            // Since the baseline file does not exist (this is a good thing),
            // determine if the connected DCU V device has part number
            // "3079530-01" or "3127069-01"
            // (we already checked that it has either a part no. of either
            // "3079530-01" or "3127069-01"
            //-----------------------------------------------------------------
            if (GlobalVars.PART_NUMBER.equals("3079530-01") == true)
            {
                // Since the part number is "3079530-01", we set the skipping flag to FALSE
                // The Utility Program will program the connected DCU V device
                skipToFinalStateFileCreation = false;
            }
            else
            {
                // Since the connected DCU V device has part number "3127069-01" and
                // no DCU5 baseline file was found, the Utility Program have no choice buy to shutdown
                JOptionPane.showMessageDialog(null,"The connect DCU V device has part number 3127069-01 and the baseline file\nis NOT found on the root or specified directory on the USB drive.\nPlease verify you have connected the correct DCU device.\nThe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.INFORMATION_MESSAGE);
                //System.exit(0);
                Utilities.shutdownSystem();
            }            
        }

        // Initialize the variable that stores the engine data block
        engineData = new tEngineData();        
        //-----------------------------------------------------------------------
        // Check if we need to create the DCU5 baseline file based on the above
        // checks on the part number and existence of the DCU5 file
        //-----------------------------------------------------------------------
        if (skipToFinalStateFileCreation == false)
        {
            //--------------------------------------------------------------------
            // Step 8.  Readback the DCU contents (entire memory)
            // Step 9.  Store the DCU memory contents into baseline DCU5 file
            //--------------------------------------------------------------------
            Utilities.ProgressFrameSetTxt("Creating DCU5 Baseline File...", (double) 0.01);

            // Create the DCU5 baseline file.  We know we have to create it as we just checked that it
            // does NOT exist
            returnVal2 = engineData.createDcu5BaselineFile();

            if (returnVal2 != 0)
            {
                // We have a problem during the DCU5 baseline file creation.  Bring back the StartProgramming window
                GlobalVars.startProgrammingFrame.setVisible(true);           
            }
        } // if (skipToFinalStateFileCreation == false)


        // Determine if we need to skip "Step 10 - Erase the NVM", "Step 11 - Program EDT" and "Step 12 - Change Part No.+Serial No."
        if (skipNvmEraseEdtProgrammingChangePartNum == false)
        {
            //--------------------------------------------------------------------
            // Step 10.  Erase the NVM
            //--------------------------------------------------------------------
            if (returnVal2 == 0)
            {
                Utilities.ProgressFrameSetTxt("Commanding DCU V device to Maintenance Mode...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.maintCommand(cmdData);

                // Need some delay after entering Maintenance mode. Need to wait for DCU device to settle down
                // Sleep for 2000 ms
                try
                {
                    TimeUnit.MILLISECONDS.sleep(2000);  // 2000ms delay
                }
                catch(InterruptedException ex){}   


                Utilities.ProgressFrameSetTxt("Erasing NVM...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.eraseData(cmdData);

                // Need some delay after Erasing the NVM
                // Sleep for 4000 ms
                try
                {
                    TimeUnit.MILLISECONDS.sleep(4000);  // 4000ms delay
                }
                catch(InterruptedException ex){}   

                Utilities.ProgressFrameSetTxt("Rebooting device...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.reboot(cmdData);            
//TBD                
                // Delay for 3.0 sec
//                try{
//                    TimeUnit.MILLISECONDS.sleep(3000);  // delay for 3000 milliseconds
//                }
//                catch(/InterruptedException ex){
//                    System.err.println(ex.getMessage());
//                }                    
            }

            //-----------------------------------------------------------------------------------------------
            // Step 11.  Program the new EDT into the DCU device with the created Blocks #0, #1, #9 and #205
            //-----------------------------------------------------------------------------------------------        
            if (returnVal2 == 0)
            {                
                //Utilities.ProgressFrameSetTxt("Commanding DCU V device to Maintenance Mode...", (double) 0.01);
                //cmdData = new TcmdData();
                //cmdData.clear();
                //GlobalVars.maintCommand.maintCommand(cmdData);

                // Copy over Engine Data Block 0, 1, 9 and 205 that was generated earlier
                // during the DCU V device data dump for programming into the DCU device
                for (tEngineDataBlock engineDataBlock : engineData.engineDataBlockList)
                {
                    tEngineDataBlock tempEngineDataBlock = new tEngineDataBlock();

                    for (int yy=0;yy<engineDataBlock.dataIndex;yy++)                    
                        tempEngineDataBlock.data[yy] = engineDataBlock.data[yy];
                    tempEngineDataBlock.blockId = engineDataBlock.blockId;
                    tempEngineDataBlock.dataIndex = engineDataBlock.dataIndex;

                    GlobalVars.testLoginPwd.engineData.engineDataBlockList.add(tempEngineDataBlock);
                }

                Utilities.ProgressFrameSetTxt("Programming EDT into DCU V device...", (double) 0.01);
                GlobalVars.testLoginPwd.startProgrammingEdt();
            }
            //--------------------------------------------------------------------
            // Step 12.  Change the Part no. and Serial no.
            //--------------------------------------------------------------------
            if (returnVal2 == 0)
            {
                Utilities.ProgressFrameSetTxt("Commanding DCU V device to Maintenance Mode...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.maintCommand(cmdData);

                // Need some delay after entering Maintenance mode. Need to wait for DCU device to settle down
                // Sleep for 2000 ms
                try
                {
                    TimeUnit.MILLISECONDS.sleep(2000);  // 2000ms delay
                }
                catch(InterruptedException ex){}   

                Utilities.ProgressFrameSetTxt("Changing Part no. and Serial no. on DCU V device...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();            


                //------------------------------------------------------------------------
                // Create new Part Number and Serial Number string
                //-------------------------------------------------------------------------
                //cmdData.dataBlock = "3079530-01      0123456789      ".getBytes();
                newPartSerialNumber = "3127069-01      " + GlobalVars.SERIAL_NUMBER;
                numFillerSpaces = 16 - GlobalVars.SERIAL_NUMBER.length();
                for(int i=0; i<numFillerSpaces;i++)
                {
                    newPartSerialNumber += " ";
                }                        
                cmdData.dataBlock = newPartSerialNumber.getBytes();
                
                
                GlobalVars.maintCommand.configureUnitID(cmdData);                    

                Utilities.ProgressFrameSetTxt("Rebooting device...", (double) 0.01);
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.reboot(cmdData);            


                // Need a few seconds delay after the device reboots
                // Sleep for 4000 ms
                try
                {
                    TimeUnit.MILLISECONDS.sleep(4000);  // 4000ms delay
                }
                catch(InterruptedException ex){}   


                // Setup the DCU V part number, serial number
                GlobalVars.PART_NUMBER = "3127069-01";
                GlobalVars.progressFrame.jLabel9.setText(GlobalVars.PART_NUMBER);
                GlobalVars.progressFrame.jLabel10.setText(GlobalVars.SERIAL_NUMBER);
            }            
        } // if (skipNvmEraseEdtProgrammingChangePartNum == false)
        
        //--------------------------------------------------------------------
        // Step 13.  Readback the DCU contents (entire memory)
        // Step 14.  Store the DCU memory contents into final-state DCU5 file
        //--------------------------------------------------------------------
        if (returnVal2 == 0)
        {
            Utilities.ProgressFrameSetTxt("Creating DCU5 Final-state File...", (double) 0.01);
            returnVal2 = engineData.createDcu5FinalStateFile();        
        }
        
        //--------------------------------------------------------------------
        // Programming Completed
        //--------------------------------------------------------------------
        if (returnVal2 == 0)
        {
            // Stop "Time Elapsed" timer
            GlobalVars.gElapsedTimer.cancel();
            
            Utilities.ProgressFrameSetTxt("Programming completed successfully...", (double) 0xFF);
            JOptionPane.showMessageDialog(null,"DCU Upgrade process completed successfully.\nPlease click \"Exit Program\" button in the Progress Status window\nto shutdown the Utility Program.\nPlease power off the laptop after the program shuts down.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.WARNING_MESSAGE);
            GlobalVars.progressFrame.jButton1.setEnabled(true);
        }        
    }
    
    public void startManualControl()
    {
        // Connect to DCU and get its current configuration
        dcuConnectAndGetConfig();
    }

    
    public int dcuConnectAndGetConfig()
    {
        int returnVal1 = JOptionPane.CANCEL_OPTION;
        int returnVal2 = JOptionPane.CANCEL_OPTION;
        int keepTryingFlag = JOptionPane.YES_OPTION;
        TcmdData cmdData = null;
        Runtime runtime;
        Process process;
        String osName;
        String [] portList = null;
        File usbAdaptorFile = null;
        
        /*
        if (portList.length == 0)
        {
            JOptionPane.showMessageDialog(null,"Error detecting the Field Reprogramming Unit on the laptop.\nPlease be certain that the unit is plugged into the laptop.\nPlease remove and plug-in the unit again if it was previously plugged into the laptop.\nThen reboot the laptop to try again.  The Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);            
            //System.exit(0);
            Utilities.shutdownSystem();
        }
        else
        {
            // Store Comm Port Name
            GlobalVars.gCommPortName = portList[0];
        }
        */
              
        //-------------------------------------------------------------------------------
        // Verify that the OS has mounted the USB adapter properly on the laptop
        //-------------------------------------------------------------------------------
        osName = System.getProperty("os.name").toLowerCase();
        GlobalVars.commPort = new CommunicationPort();
        
        //
        // Attempt communication with DCU device
        //        
        portList = GlobalVars.commPort.listSerialPorts();
        if ((osName.indexOf("nux") >= 0) && (portList.length > 0))
        {
            // Store Comm Port Name
            GlobalVars.gCommPortName = portList[0];

            usbAdaptorFile = new File("/dev/ttyUSB3"); // this is where the USB adapter is mounted

            if (usbAdaptorFile.exists())
            {
                // nothing to do, everything is good
                // The USB adapter is plugged into the laptop and detected successfully
            }
            else
            {
                //JOptionPane.showMessageDialog(null,"Field Programming Unit not plugged into the laptop.\nIf the unit was plugged-in earlier, please remove and plug it into the laptop again.\nThe laptop will try detecting the DCU device again.\nThe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(null,"Field Programming Unit not plugged into the laptop.\nIf the unit was plugged-in earlier, please remove and plug it into the laptop again.\nThe Utility Program will shutdown now.\nPlease power up the laptop to start the Upgrade process again.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                
                Utilities.shutdownSystem();
            }
        } // if (osName.indexOf("nux") >= 0)                    
        
        //****************************************************************
        // 1. Connect to DCU device
        // 2. Send Maintenance Command
        // 3. Send Display Configuration Command
        // 4. Send "Return DCU ID" command
        //****************************************************************
        //        
        //try
        //{
            // We have 2 situations (for Linux only)
            // Situalion 1: A "LCK..ttyUSB0" or "LCK..ttyUSB1" or "LCK..ttyUSB2" or "LCK..ttyUSB3" lock file exist and needs to be removed
            // Situation 2: There is really no USB-to-Serial adapter plugged-into the laptop
            try
            {
                //--------------------------------
                // Test for Situation 1
                //--------------------------------
                // If we are in Linux, check if there was a STALE lock file leftover from previous runs
                // If yes, try to remove the lock file on the USB device
                osName = System.getProperty("os.name").toLowerCase();
                if (osName.indexOf("nux") >= 0)
                {                        
                    // Set OS Name
                    GlobalVars.gOsName = "Linux";

                    File file0= new File("/run/lock/LCK..ttyUSB0");
                    File file1= new File("/run/lock/LCK..ttyUSB1");
                    File file2= new File("/run/lock/LCK..ttyUSB2");
                    File file3= new File("/run/lock/LCK..ttyUSB3");

                    runtime = Runtime.getRuntime();                       
                    
                    if (file0.exists() == true)
                    {
                        process = runtime.exec("rm -rf /run/lock/LCK..ttyUSB0");                                
                    }
                    
                    if (file1.exists() == true)
                    {
                        process = runtime.exec("rm -rf /run/lock/LCK..ttyUSB1");
                    }

                    if (file2.exists() == true)
                    {
                        process = runtime.exec("rm -rf /run/lock/LCK..ttyUSB2");
                    }

                    if (file3.exists() == true)
                    {
                        process = runtime.exec("rm -rf /run/lock/LCK..ttyUSB3");
                    }

                    // Port 3 is the working and active port after trial-and-error
                    GlobalVars.commPort.connect(portList[3], 9600);
                    
                }  // if (osName.indexOf("nux") >= 0)
                else if (osName.indexOf("win") >= 0)
                {
                    // Set OS Name
                    GlobalVars.gOsName = "Windows";                    
                }
            } // try
            catch (NullPointerException ex)
            {
                // No LCK...ttyUSB0 file exist.  Nothing to do
            }
            catch (IOException e)
            {
                // No LCK...ttyUSB0 file exist.  Nothing to do
                // The LCK..ttyUSB0 file may be read-only access.  In that case, we do nothing.  Let the O/S deal with it.
            }
        //}
        /*
        catch (IOException e)
        {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null,"Error connecting to serial port.\nPlease verify that the serial port is plugged-in and available.\nThe Utility Program will shutdown now.","DCU V FRK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
            System.exit(0);            
        }        
        */
    
        cmdData = new TcmdData();
        //--------------------------------------------------------------------
        // Step 1.  Check the Part no. & Serial no.
        // Put the DCU V device into Maintenance Mode first
        //--------------------------------------------------------------------
        while ((returnVal1 != 0) && (keepTryingFlag == JOptionPane.YES_OPTION))        
        {
            cmdData.clear();
            
            // Connect to DCU V at 9,600 baud
            Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 9,600 baud...", (double) 0.0);
            
            //---------------------------
            // Send Maintenance Command
            //---------------------------
            returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);


            if (returnVal1 != 0)
            {
                // Connect to DCU V at 19,200 baud
                Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 19,200 baud...", (double) 0.0);
                Utilities.setConnectionBaudrate(19200);

                cmdData.clear();
                //---------------------------
                // Send Maintenance Command
                //---------------------------
                returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);
                
                if (returnVal1 != 0)
                {
                    // Connect to DCU V at 38,400 baud
                    Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 38,400 baud...", (double) 0.0);
                    Utilities.setConnectionBaudrate(38400);

                    cmdData.clear();
                    //---------------------------
                    // Send Maintenance Command
                    //---------------------------
                    returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

                    if (returnVal1 != 0)
                    {
                        // Connect to DCU V at 57,600 baud
                        Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 57,600 baud...", (double) 0.0);
                        Utilities.setConnectionBaudrate(57600);

                        cmdData.clear();
                        //---------------------------
                        // Send Maintenance Command
                        //---------------------------
                        returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

                        if (returnVal1 != 0)
                        {
                            // Connect to DCU V at 115,200 baud
                            Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 115,200 baud...", (double) 0.0);
                            Utilities.setConnectionBaudrate(115200);

                            cmdData.clear();
                            //---------------------------
                            // Send Maintenance Command
                            //---------------------------
                            returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);

                            if (returnVal1 != 0)
                            {
                                // Connect to DCU V at 9,600 baud
                                Utilities.ProgressFrameSetTxt("Attempting to connect to DCU at 9,600 baud...", (double) 0.0);
                                Utilities.setConnectionBaudrate(9600);

                                cmdData.clear();
                                //---------------------------
                                // Send Maintenance Command
                                //---------------------------
                                returnVal1 = GlobalVars.maintCommand.maintCommand(cmdData);
                            }                                            
                        }                
                    }
                }            
            }                
            
            if (returnVal1 != 0)
            {
                GlobalVars.commDataFrame.setVisible(true);
                keepTryingFlag = JOptionPane.showConfirmDialog(null,"Try connection to DCU again?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);
            }
        }
        
        // Hide the StartProgramming Frame
        GlobalVars.startProgrammingFrame.setVisible(false);
        
        // If there is a problem, terminate program
        if (returnVal1 != 0)
        {
            if (GlobalVars.gOperationMode.equals("ManualOverrideMode") == true)
            {
                returnVal2 = JOptionPane.showConfirmDialog(null,"Terminate Utility Program?","DCU V FRK" + Constants.SW_VERSION,JOptionPane.YES_NO_OPTION);                
                
                if (returnVal2 == JOptionPane.YES_OPTION)
                {
                    //System.exit(0);
                    Utilities.shutdownSystem();
                }
                else
                {
                    // Hide StartProgramming window
                    GlobalVars.startProgrammingFrame.setVisible(false);
                    
                    // Wait for next operator command
                }
            }
        }        
        
        //
        // If the Maintenance is successful, we will move on and send the Display Configuration command
        //
        if (cmdData.cmdResult == true){
            Arrays.fill(cmdData.cmdBuf,(byte)0);
            Arrays.fill(cmdData.receiveBuf,(byte)0);            

            {
                byte[] tmpReceivedBuffer = new byte[Constants.BUF_SIZE];
                int offset = 0;
                String dcuAddressStr = new String();
                String baudRateStr = new String();
                String dcuTypeStr = new String();
                String blockSizeStr = new String();
                String testEnableStr = new String();
                String transmitModeStr = new String();
                String spareStr = new String();
                String tempStringStatus = new String();


                //--------------------------------------
                // Send Display Configuration command
                //--------------------------------------
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.displayConfigure(cmdData);

                // Get a copy of the received buffer
                tmpReceivedBuffer = java.util.Arrays.copyOf(cmdData.receiveBuf, Constants.BUF_SIZE);


                //------------------------------------------------------
                // Send Reboot command to get ot of Maintenance Mode
                //------------------------------------------------------
                //cmdData = new TcmdData();
                cmdData.clear();
                GlobalVars.maintCommand.reboot(cmdData);   //reboot after read configuration

                // DCU Address
                offset = 3;
                GlobalVars.sysConfig.setDcuAddress((int) tmpReceivedBuffer[offset]);
                dcuAddressStr = Integer.toString(GlobalVars.sysConfig.getDcuAddress());

                // baud rate
                offset = 4;
                GlobalVars.sysConfig.setBaudRate((int) tmpReceivedBuffer[offset]);
                switch(tmpReceivedBuffer[offset])
                {
                    case 1:
                        baudRateStr = "9600";
                        break;
                    case 2:
                        baudRateStr = "19200";
                        break;
                    case 3:
                        baudRateStr = "38400";
                        break;
                    case 4:
                        baudRateStr = "115200";
                        break;
                    default:
                        baudRateStr = "Unknown";
                        break;
                }

                // Transmit Mode
                offset = 5;
                GlobalVars.sysConfig.setTransmitMode((int) tmpReceivedBuffer[offset]);
                switch(tmpReceivedBuffer[offset])
                {
                    case 0:
                        transmitModeStr = "Continuous";
                        break;
                    case ((byte) 0xFF):
                        transmitModeStr = "Switched";
                        break;
                    default:
                        transmitModeStr = "Unknown";
                        break;
                }


                // DCU Type
                offset = 6;
                switch(tmpReceivedBuffer[offset])
                {
                    case ((byte) 0x55):
                        //GlobalVars.sysConfig.cmdSet = Constants.DCUV;
                        GlobalVars.sysConfig.setCmdSet((int) Constants.DCUV);
                        dcuTypeStr = "DCU V";
                        break;
                    case ((byte) 0xAA):
                        //GlobalVars.sysConfig.cmdSet = Constants.DCUII;
                        GlobalVars.sysConfig.setCmdSet((int) Constants.DCUII);
                        dcuTypeStr = "DCU II";
                        break;
                    case ((byte) 0xCC):
                        //GlobalVars.sysConfig.cmdSet = Constants.DCUIV;
                        GlobalVars.sysConfig.setCmdSet((int) Constants.DCUIV);
                        dcuTypeStr = "DCU IV";
                        break;
                    default:
                        //GlobalVars.sysConfig.cmdSet = Constants.DCUV;
                        GlobalVars.sysConfig.setCmdSet((int) Constants.DCUV);
                        dcuTypeStr = "Unknown";
                        break;
                }


                // Block size
                offset = 7;
                GlobalVars.sysConfig.setBlockSize((int) tmpReceivedBuffer[offset]);
                switch(tmpReceivedBuffer[offset])
                {
                case 1:
                    blockSizeStr = "128";
                    break;
                case 2:
                    blockSizeStr = "256";
                    break;
                case 3:
                    blockSizeStr = "512";
                    break;
                case 4:
                    blockSizeStr = "1024";
                    break;
                default:
                    blockSizeStr = "Unknown";
                    break;
                }


                // Test Enable
                offset = 8;
                switch(tmpReceivedBuffer[offset])
                {
                    case ((byte) 0xAA):
                        GlobalVars.sysConfig.setTestEnable(1);
                        testEnableStr = "Enabled";
                        break;
                    default:
                        GlobalVars.sysConfig.setTestEnable(0);
                        testEnableStr = "Disabled";
                        break;
                }


                // Spare
                offset = 9;
                GlobalVars.sysConfig.setSpare((int)tmpReceivedBuffer[offset]);
                if(tmpReceivedBuffer[offset] == 0)
                    spareStr = "0";
                else
                    spareStr = "Unknown";

                // don't know what's this
                //GlobalVars.sysConfig.idSize = 2;
                GlobalVars.sysConfig.setIdSize(2);

                tempStringStatus = portList[0] + ", DCU " +
                                   dcuAddressStr + ", " + 
                                   baudRateStr + ", " +
                                   dcuTypeStr + ", " +
                                   blockSizeStr + ", " +
                                   testEnableStr;
                jTextField1.setText(tempStringStatus);                
                
                
                // Setup the DCU V part number, serial number and configuration details
                GlobalVars.progressFrame.jLabel9.setText(GlobalVars.PART_NUMBER);
                GlobalVars.progressFrame.jLabel10.setText(GlobalVars.SERIAL_NUMBER);

                switch(GlobalVars.sysConfig.getBaudRate())
                {
                    case 1:
                        GlobalVars.progressFrame.jLabel16.setText("9600");
                        break;
                    case 2:
                        GlobalVars.progressFrame.jLabel16.setText("19200");
                        break;
                    case 3:
                        GlobalVars.progressFrame.jLabel16.setText("38400");
                        break;
                    case 4:
                        GlobalVars.progressFrame.jLabel16.setText("115200");
                        break;
                    default:
                        GlobalVars.progressFrame.jLabel16.setText("Unknown");
                        break;
                }

                // DCU Address
                GlobalVars.progressFrame.jLabel19.setText(Integer.toString(GlobalVars.sysConfig.getDcuAddress()));
                
                // Transmit Mode
                switch(GlobalVars.sysConfig.getTransmitMode())
                {
                    case 0:
                        GlobalVars.progressFrame.jLabel21.setText("Continuous");
                        break;
                    case ((byte) 0xFF):
                        GlobalVars.progressFrame.jLabel21.setText("Switched");
                        break;
                    default:
                        GlobalVars.progressFrame.jLabel21.setText("Unknown");
                        break;
                }


                // DCU Type
                switch(GlobalVars.sysConfig.getCmdSet())
                {
                    case ((int) Constants.DCUV):
                        GlobalVars.progressFrame.jLabel18.setText("DCU V Enhanced");
                        break;
                    case ((int) Constants.DCUII):
                        GlobalVars.progressFrame.jLabel18.setText("DCU II Legacy Mode");
                        break;
                    case ((int) Constants.DCUIV):
                        GlobalVars.progressFrame.jLabel18.setText("DCU IV Legacy Mode");
                        break;
                    default:
                        GlobalVars.progressFrame.jLabel18.setText("Unknown");
                        break;
                }


                // Block size
                switch(GlobalVars.sysConfig.getBlockSize())
                {
                case 1:
                    GlobalVars.progressFrame.jLabel17.setText("128");
                    break;
                case 2:
                    GlobalVars.progressFrame.jLabel17.setText("256");
                    break;
                case 3:
                    GlobalVars.progressFrame.jLabel17.setText("512");
                    break;
                case 4:
                    GlobalVars.progressFrame.jLabel17.setText("1024");
                    break;
                default:
                    GlobalVars.progressFrame.jLabel17.setText("Unknown");
                    break;
                }
                
            }            
        } // if (cmdData.cmdResult == true)
        else
        {
           GlobalVars.dcuConfig = new DcuConfigure();
           GlobalVars.dcuConfig.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
           GlobalVars.dcuConfig.setTitle("Configure DCU");           
           GlobalVars.dcuConfig.setBounds(0,490,1000,600);
        }

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************
        
        return 0;
    }
    
}
