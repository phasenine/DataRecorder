/*
 * TestLoginPwd.java
 *
 * Created on January 29, 2014, 10:23 AM
 */

package jDcuVFrkPackage;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.concurrent.TimeUnit;
import java.io.UnsupportedEncodingException;
import java.io.IOException;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.io.File;

import java.awt.Cursor;

import javax.swing.JFrame;

import javax.swing.text.DefaultCaret;


/**
 *
 * @author  FKY301079
 */
public class TestLoginPwd extends javax.swing.JFrame {
    public tEngineData engineData = new tEngineData();
    
    /** Creates new form TestLoginPwd */
    public TestLoginPwd() {
        initComponents();
        initialize();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Performed by:");

        jLabel2.setText("Password:");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Data Loading Mode");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCheckBox1.setText("Enable Data Loading Mode Selection");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Read Only Data Block Load");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.setEnabled(false);

        jRadioButton2.setText("Normal Write Data Block Load");
        jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton2.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRadioButton2)
                        .addComponent(jRadioButton1))
                    .addComponent(jCheckBox1))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel4.setText("Developed by Safran Electronics Canada (www.safran-electronics.ca)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean readOnlyDataLoad = true;
        int returnVal = 0;
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file", "txt", "text");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        tEngineData engineData = new tEngineData();
        
        GlobalVars.tdsDataFrame = new TDSframe();
        GlobalVars.tdsDataFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GlobalVars.tdsDataFrame.setTitle("Test Data Sheet (TDS)");
        GlobalVars.tdsDataDoc = GlobalVars.tdsDataFrame.jEditorPane1.getDocument();

        DefaultCaret caret = (DefaultCaret) GlobalVars.commDataFrame.jEditorPane1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        


        //---------------------------------------
        // Make the TDS Frame visible first
        //---------------------------------------
        GlobalVars.tdsDataFrame.setVisible(true);                                

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //*********************************************************************


        if (jRadioButton1.isSelected() == true )//(jCheckBox1.isSelected() == true)
        {
            readOnlyDataLoad = true;
        }
        else
        {
            readOnlyDataLoad = false;
        }

        if ( jTextField1.getText().isEmpty() )
        {
            JOptionPane.showMessageDialog(null,"Please input a operator name who performs the data upload.","DCU V FPK",JOptionPane.WARNING_MESSAGE);
            return;
        }

        if ( jTextField2.getText().isEmpty() )
        {
            JOptionPane.showMessageDialog(null,"Please input the password for the data upload.","DCU V FPK",JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Display dialog to choose the Engine Data Table file
        returnVal = fileChooser.showOpenDialog(this);
        
        // Copy the entered Username and Password.  Then hide the Window        
        engineData.performedBy = jTextField1.getText();
        engineData.password = jTextField2.getText();
        GlobalVars.testLoginPwd.setVisible(false);


        if(returnVal == JFileChooser.APPROVE_OPTION) {
            GlobalVars.gEngineDataLoad = true;


            if (readOnlyDataLoad)
            {
               GlobalVars.ENGINE_DATA_TYPE = "Read Only ";
            }
            else
            {
               GlobalVars.ENGINE_DATA_TYPE = "Read Write";
            }

        }
        else
        {
            return;
        }


        startProgrammingEdt();

        //*********************************************************************
        jButton1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //*********************************************************************   

        /*
            new Thread(new Runnable() {
                    public void run() {
                        try{

                            //             SwingUtilities.invokeLater(new Runnable() {
                            //                 public void run() {
                            //                     statusArea.append("Fetching has been started");
                            //                 }
                            //           });
                            SwingUtilities.invokeAndWait(new Runnable() {
                                public void run() {

                                }
                            });
                        }
                        catch (java.lang.InterruptedException ex){
                            System.err.println(ex.getMessage());
                        }                            
                        catch (java.lang.reflect.InvocationTargetException ex){
                            System.err.println(ex.getMessage());
                        }
                    }
                }).start();
        */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected() == true){
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);            
        }            
        else{
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);            
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new TestLoginPwd().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void initialize(){
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
    }
    
    
    public void startProgrammingEdt(){
        int status = 0;
        boolean result = true;
        byte[] performedBy = new byte[128];
        byte[] password = new byte[128];
        byte[] reportResult = new byte[80];
        boolean readOnlyDataLoad = true;
        int inCorrectDataId = 0;
        TcmdData cmdData;
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        int offset = 0;
        byte[] tmpReceivedBuffer = new byte[Constants.BUF_SIZE];
        String osName;        
        TsysConfig tempSysConfig = new TsysConfig();
        int crc = 0;
        short dwBytesRead = 0;
        int cmdStatusWord = 0;
        String statusMsg = new String();
        int returnVal = 0;
        File directory1;
        File file1;
        File[] fList1;        

        // Read engine data from file, and setup data structure
        if (GlobalVars.tdsDataFrame != null)
        {
            GlobalVars.tdsDataFrame.jTextField1.setText("Processing Engine Data Table...\n\n");
            GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());
        }

        //--------------------------------------------------------------------------
        // Step 1.3
        // Decide the full path name based on the Operating System we are using
        //--------------------------------------------------------------------------
        try
        {
            osName = System.getProperty("os.name").toLowerCase();
            if (osName.indexOf("win") >= 0)
            {
                // We are using a Windows O/S
                GlobalVars.gEdtFilePath = "C:\\" + "62996-01.txt";
            }
            else if (osName.indexOf("nux") >= 0)
            {                
                directory1 = new File("/edt"); // this is where EDT file resides
                ///File directory1 = new File("/run/media"); // this is where all mounted USB drives show up
                ///File directory1 = new File("/media"); // this is where all mounted USB drives show up
                ///File directory2;

                // get all the files from a directory
                fList1 = directory1.listFiles();

                if (fList1.length > 0)
                {
                    GlobalVars.gEdtFilePath = fList1[0].getAbsolutePath();

                    file1 = new File(GlobalVars.gEdtFilePath);
                    if (file1.exists())
                    {
                        // everything is good.  nothing to do here
                    }
                    else
                    {
                        // Bad.  The Engine Data Table file is not found
                        // Will have to inform the operator that the Utility Program has no choice but to shutdown
                        JOptionPane.showMessageDialog(null,"Unable to find Engine Data Table file (62999-01.txt) for programming.\nPlease verify engine data table is located on the DVD ROM at folder /edt\nThe Utitlity Program will shutdown now.\nPlease turn off or power cycle the laptop.","DCU V FPK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                        Utilities.shutdownSystem();
                    }
                }
                else
                {
                    // Bad.  The Engine Data Table file is not found
                    // Will have to inform the operator that the Utility Program has no choice but to shutdown
                    JOptionPane.showMessageDialog(null,"Unable to find Engine Data Table file (62999-01.txt) for programming.\nPlease verify engine data table is located on the DVD ROM at folder /edt\nThe Utitlity Program will shutdown now.\nPlease turn off or power cycle the laptop.","DCU V FPK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                    Utilities.shutdownSystem();
                }
            }
            else
            {
                // We have a major problem, we are not either in Windows or Linux O/S
                // Just shutdown the program
                JOptionPane.showMessageDialog(null,"Unrecognized Operating System.  The Utility Program will shutdown now..","DCU V FPK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
                Utilities.shutdownSystem();
            }
        }
        catch (NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null,"Unable to find Engine Data Table file (62999-01.txt) for programming.\nPlease verify engine data table is located on the DVD ROM at folder /edt\nThe Utitlity Program will shutdown now.\nPlease turn off or power cycle the laptop.","DCU V FPK" + Constants.SW_VERSION,JOptionPane.ERROR_MESSAGE);
            Utilities.shutdownSystem();
        }
                    
        // Process the Engine Data Table file that will be uploaded to the DCU V device
        status = engineData.setup(GlobalVars.gEdtFilePath);
        
        if (status == 0)
        {            
            //send data block           
            if (GlobalVars.tdsDataFrame != null)
            {
                GlobalVars.tdsDataFrame.setVisible(true);

                GlobalVars.tdsDataFrame.jTextField1.setText("Uploading...\n\n");
                GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());
            }

            Utilities.ProgressFrameSetTxt("Programming engine data table blocks into connected DCU V device...", (double) 1.0);
            result = engineData.upload();


            // Inform operator that the upload failed if there was a problem with upload
            if (result == false)
            {
                if (GlobalVars.tdsDataFrame != null)
                {
                    // Read back
                    GlobalVars.tdsDataFrame.jTextField1.setText("Upload failed...\n\n");
                    GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());                
                }
            }
            
            //if it's read only load, it is in maintenance mode, so Reboot the DCU V to change to normal mode,
            if (readOnlyDataLoad)
            {
                if (GlobalVars.tdsDataFrame != null)
                {
                    GlobalVars.tdsDataFrame.jTextField1.setText("Rebooting device...\n\n");
                    GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());                
                }
                
                
                Utilities.ProgressFrameSetTxt("Rebooting the connected DCU V device...", (double) 1.0);
                cmdData = new TcmdData();
                GlobalVars.maintCommand.reboot(cmdData);

                // Delay for 5.0 sec
                try{
                    TimeUnit.MILLISECONDS.sleep(5000);  // delay for 5000 milliseconds
                }
                catch(InterruptedException ex){
                    System.err.println(ex.getMessage());
                }    
            }


            // Read back
            if (GlobalVars.tdsDataFrame != null)
            {
                GlobalVars.tdsDataFrame.jTextField1.setText("Data read back...\n\n");
                GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());                
            }

            
            //*************************************************************************************************************************
            // Set DCU V device to 115,200 baud temporary
            // Set the block size to 128 bytes as well
            //*************************************************************************************************************************
            cmdData = new TcmdData();
/*            
            //---------------------------
            // Send Maintenance Command
            //---------------------------
            GlobalVars.maintCommand.maintCommand(cmdData);        

            //--------------------------------------
            // Send Display Configuration command
            //--------------------------------------
            cmdData = new TcmdData();
            GlobalVars.maintCommand.displayConfigure(cmdData);

            //tmpReceivedBuffer = cmdData.getReceive();                
            tmpReceivedBuffer = java.util.Arrays.copyOf(cmdData.receiveBuf, 14);


            // DCU Address
            offset = 3;
            tempSysConfig.setDcuAddress((int) tmpReceivedBuffer[offset]&0xFF);

            // baud rate
            offset = 4;
            tempSysConfig.setBaudRate((int) tmpReceivedBuffer[offset]&0xFF);

            // Transmit Mode
            offset = 5;
            tempSysConfig.setTransmitMode((int) tmpReceivedBuffer[offset]&0xFF);

            // DCU Type
            offset = 6;
            tempSysConfig.setCmdSet((int) tmpReceivedBuffer[offset]&0xFF);

            // Block size
            offset = 7;
            tempSysConfig.setBlockSize((int) tmpReceivedBuffer[offset]&0xFF);

            // Test Enable
            offset = 8;
            tempSysConfig.setTestEnable((int) tmpReceivedBuffer[offset]&0xFF);

            // Spare
            offset = 9;
            tempSysConfig.setSpare((int) tmpReceivedBuffer[offset]&0xFF);

            //----------------------------------------------------
            // Send Reboot command to get back to Normal Mode
            //----------------------------------------------------	
            cmdData.clear();
            returnVal = GlobalVars.maintCommand.reboot(cmdData);
            cmdStatusWord = cmdData.receiveBuf[2];
            cmdStatusWord = ((cmdStatusWord << 8) & 0xFF00) + cmdData.receiveBuf[1];
            if ((cmdStatusWord != 0) || (returnVal != 0))
            {
               JOptionPane.showMessageDialog(null,"Unexpected DCU error.\nFail To Reboot DCU.  Upgrade process is discontinued.\nThe Utility Program will shutdown now.\nPlease inform your manager or supervisor of the error.","DCU V FPK" + Constants.SW_VERSION,JOptionPane.WARNING_MESSAGE);            
               Utilities.shutdownSystem();
            }
*/
            // Command the DCU II to 115,200 baud
            Utilities.ProgressFrameSetTxt("Commanding DCU II device to 115,200 baud...", (double) 0.01);
            cmdData.clear();
            GlobalVars.dcuCommand.receiveBaudRate((byte) 4);
            cmdData.clear();
            GlobalVars.dcuCommand.invokeBaudRate();

            //------------------------------------------------------------------------------------
            // Set the Utility Program to 115,200 baud for faster download of engine data block
            //------------------------------------------------------------------------------------
            Utilities.ProgressFrameSetTxt("Setting Utility Program to 115,200 baud", (double) 0.01);
            Utilities.setConnectionBaudrate(115200);        

            GlobalVars.progressFrame.jLabel17.setText("128");

            // Update Progress Window to show that we are transmitting at 115,200 baud
            GlobalVars.progressFrame.jLabel16.setText("115200");
            

            //*************************************************************************************************************************            

            Utilities.ProgressFrameSetTxt("Readback programmed EDT blocks for verification...", (double) 1.0);
            engineData.readBack();
            
/*            
            //restore GSE
            GlobalVars.sysConfig.setCmdSet(tempSysConfig.getCmdSet());
            // DCU Type
            switch(tempSysConfig.getCmdSet())
            {
                case ((int) 0x55):
                    GlobalVars.progressFrame.jLabel18.setText("DCU V Enhanced");
                    break;
                case ((int) 0xAA):
                    GlobalVars.progressFrame.jLabel18.setText("DCU II Legacy Mode");
                    break;
                case ((int) 0xCC):
                    GlobalVars.progressFrame.jLabel18.setText("DCU IV Legacy Mode");
                    break;
                default:
                    GlobalVars.progressFrame.jLabel18.setText("Unknown");
                    break;
            }

            // Restore Block Size
            GlobalVars.sysConfig.setBlockSize(tempSysConfig.getBlockSize());
            switch(GlobalVars.sysConfig.getBlockSize())
            {
            case 1:
                GlobalVars.progressFrame.jLabel17.setText("128");
                break;
            case 2:
                GlobalVars.progressFrame.jLabel17.setText("256");
                break;
            case 3:
                GlobalVars.progressFrame.jLabel17.setText("512");
                break;
            case 4:
                GlobalVars.progressFrame.jLabel17.setText("1024");
                break;
            default:
                GlobalVars.progressFrame.jLabel17.setText("Unknown");
                break;
            }
            //*************************************************************************************************************************            
            

            // Verification
            if (GlobalVars.tdsDataFrame != null)
            {
                GlobalVars.tdsDataFrame.jTextField1.setText("Read back verification...\n\n");
                GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());                
            }
            
            Utilities.ProgressFrameSetTxt("Verifying programmed EDT blocks...", (double) 1.0);
            status = engineData.dataVerification();
            if ( status == 0)
            {
                if (GlobalVars.tdsDataFrame != null)
                {
                    GlobalVars.tdsDataFrame.jTextField1.setText("Data upload success.\n\n");
                    GlobalVars.tdsDataFrame.jTextField1.update(GlobalVars.tdsDataFrame.jTextField1.getGraphics());                
                }
            }
            else
            {
                // The operator decides if he/she wants to continue
                // That decision is made within the data verification function
            }
*/
            
            // Command the DCU II to 9,600 baud
            Utilities.ProgressFrameSetTxt("Commanding DCU II device to 9,600 baud...", (double) 0.01);
            cmdData.clear();
            GlobalVars.dcuCommand.receiveBaudRate((byte) 1);
            cmdData.clear();
            GlobalVars.dcuCommand.invokeBaudRate();
            
            //------------------------------------------------------------------------------------
            // Set the Utility Program back to 9,600 baud
            //------------------------------------------------------------------------------------
            Utilities.ProgressFrameSetTxt("Setting Utility Program to 9,600 baud", (double) 0.01);
            Utilities.setConnectionBaudrate(9600);        

            // Update Progress Window to show that we are transmitting at 9,600 baud
            GlobalVars.progressFrame.jLabel16.setText("9600");

            
            

            // read DCU ID and Cofiguration
            {
                cmdData = new TcmdData();
                GlobalVars.dcuCommand.readDcuID(cmdData, false);

                //read DCU configuraion
                cmdData = new TcmdData();
                GlobalVars.dcuCommand.readConfiguration(cmdData);
                tmpReceivedBuffer = cmdData.getReceive();

                // DCU Address
                offset = 2;
                try{
                    GlobalVars.DCU_ADDRESS = new String(java.util.Arrays.copyOfRange(tmpReceivedBuffer,offset,offset+1), "UTF-8");
                }                       
                catch(UnsupportedEncodingException ex){}


                // baud rate
                offset = 3;
                //memset(BAUD_RATE, 0, 20);
                switch(tmpReceivedBuffer[offset])
                {
                    case 1:
                        GlobalVars.BAUD_RATE = "9600";
                        break;
                    case 2:
                        GlobalVars.BAUD_RATE = "19200";
                        break;
                    case 3:
                        GlobalVars.BAUD_RATE = "38400";
                        break;
                    case 4:
                        GlobalVars.BAUD_RATE = "115200";
                        break;
                    default:
                        GlobalVars.BAUD_RATE = "Unknown";
                        break;
                }

                // Transmit Mode
                offset = 4;
                switch(tmpReceivedBuffer[offset])
                {
                    case 0:
                        GlobalVars.TRANSMIT_MODE = "Continuous";
                        break;
                    case ((byte) 0xFF):
                        GlobalVars.TRANSMIT_MODE = "Switched";
                        break;
                    default:
                        GlobalVars.TRANSMIT_MODE = "Unknown";
                        break;
                }

              // DCU Type
              offset = 5;
              switch(tmpReceivedBuffer[offset])
              {
                 case ((byte) 0x55):
                    GlobalVars.DCU_TYPE = "DCU V";
                    break;
                 case ((byte) 0xAA):
                    GlobalVars.DCU_TYPE = "DCU II";
                    break;
                 case ((byte) 0xCC):
                    GlobalVars.DCU_TYPE = "DCU IV";
                    break;
                 default:
                    GlobalVars.DCU_TYPE = "Unknown";
                    break;
               }


               // Block size
               offset = 6;
               switch(tmpReceivedBuffer[offset])
               {
                  case 1:
                     GlobalVars.BLOCK_SIZE = "128";
                     break;
                  case 2:
                     GlobalVars.BLOCK_SIZE = "256";
                     break;
                  case 3:
                     GlobalVars.BLOCK_SIZE = "512";
                     break;
                  case 4:
                     GlobalVars.BLOCK_SIZE = "1024";
                     break;
                  default:
                     GlobalVars.BLOCK_SIZE = "Unknown";
                     break;
               }              


               // Test Enable
               offset = 7;
               switch(tmpReceivedBuffer[offset])
               {
                  case ((byte) 0xAA):
                     GlobalVars.TEST_ENABLE = "Enabled";
                     break;
                  default:
                     GlobalVars.TEST_ENABLE = "Disabled";
                     break;
               }               

               // Spare
               offset = 8;
               if(tmpReceivedBuffer[offset] == 0)
               {
                   GlobalVars.SPARE = "0";
               }
               else
               {
                   GlobalVars.SPARE = "Unknown";
               }               
            }           

            // Output Engine Data table
            if (GlobalVars.tdsDataFrame != null)
            {
                engineData.outputToForm(readOnlyDataLoad);
            }
        } // if (status == 0)

        if (status == 0)
        {
            if (GlobalVars.tdsDataFrame != null)
                Utilities.TdsFrameAppendTxt("Engine data table upload successful.");
        }
        else
        {
            if (GlobalVars.tdsDataFrame != null)
                Utilities.TdsFrameAppendTxt("Engine data table upload failed.");
        }        
        
        GlobalVars.testLoginPwd.setVisible(false);        
    }
}
